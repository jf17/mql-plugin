/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package ru.jf17.mql.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import ru.jf17.mql.psi.MQLTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/Alex/Documents/GitHub/fork/mql-plugin/src/main/java/ru/jf17/mql/lexer/MQLLexer.flex</tt>
 */
class MQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FIRST_DOT_OPERATOR = 2;
  public static final int MAYBE_FIRST_DOT_OPERATOR = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\42\1\44\1\45\4\42\1\46\1\47\1\50\1\42\1\51"+
    "\1\52\1\53\1\42\31\21\1\54\121\21\1\55\4\21\1\56\1\21\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\53\21\1\65\41\42\1\21\1\66\1\67\1\21\1\70\1\71\1\72\1\73\1\74\1"+
    "\75\1\76\1\77\1\100\1\21\1\101\1\102\1\103\1\104\1\105\1\106\1\42\1\107\1"+
    "\42\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\42\1\121\1\42"+
    "\1\122\3\42\3\21\1\123\1\124\1\125\12\42\4\21\1\126\17\42\2\21\1\127\41\42"+
    "\2\21\1\130\1\131\3\42\1\132\27\21\1\133\2\21\1\134\45\42\1\135\13\42\1\136"+
    "\26\42\1\137\1\140\1\141\1\142\1\143\20\42\1\144\1\145\4\42\1\146\2\42\1\147"+
    "\16\42\246\21\1\150\20\21\1\151\1\152\25\21\1\153\51\42\2\21\1\154\u0e05\42");

  /* The ZZ_CMAP_Y table has 6976 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\4\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2"+
    "\15\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\0\1\31\6\0\1\32\1"+
    "\0\1\33\1\0\1\34\1\35\1\36\1\37\5\15\1\40\1\15\1\41\5\42\1\43\2\42\16\44\4"+
    "\45\1\46\13\44\1\47\1\50\1\51\1\52\1\53\1\54\1\47\1\52\1\55\1\47\1\44\1\52"+
    "\1\50\1\52\1\53\1\45\1\56\1\55\1\57\1\60\1\61\4\45\1\46\4\44\1\62\1\52\17"+
    "\44\1\42\1\54\1\51\1\45\1\41\2\44\21\42\1\63\6\42\4\57\1\64\1\65\2\57\1\64"+
    "\3\0\1\57\1\66\1\0\1\67\40\0\1\44\1\70\1\71\1\72\1\0\1\73\1\40\1\74\1\53\3"+
    "\15\1\75\2\15\10\42\1\76\1\54\1\55\6\44\1\42\1\77\1\51\1\53\14\15\14\42\10"+
    "\44\1\100\1\0\1\101\15\44\1\47\2\45\1\50\30\44\1\102\10\15\1\40\1\103\1\0"+
    "\1\104\11\42\22\0\6\57\1\105\1\0\1\105\13\0\12\57\1\105\5\0\2\106\1\107\1"+
    "\65\1\110\30\57\1\103\3\0\1\111\1\0\1\65\2\106\1\112\1\113\4\0\1\114\7\57"+
    "\7\0\1\110\25\57\1\64\2\0\1\103\3\0\2\106\1\112\7\57\1\105\2\0\1\64\1\33\1"+
    "\0\5\57\1\64\1\33\2\0\2\66\5\0\6\57\1\66\21\0\5\57\1\114\1\57\1\64\21\0\15"+
    "\57\1\64\1\103\4\0\1\66\1\0\2\57\1\64\1\115\2\106\1\110\3\57\1\66\1\110\1"+
    "\57\2\113\5\57\1\114\1\57\1\67\1\65\1\64\1\103\3\0\1\33\3\0\1\116\1\64\1\115"+
    "\2\106\1\64\1\117\1\120\2\0\1\110\1\105\1\121\1\113\5\57\1\114\1\57\1\114"+
    "\1\111\1\64\7\0\1\110\1\67\1\0\1\115\2\106\1\65\1\66\3\0\1\110\1\57\2\116"+
    "\5\57\1\114\1\57\1\114\1\110\1\64\1\103\4\0\1\66\3\0\1\64\1\115\2\106\2\0"+
    "\1\103\2\0\1\110\1\57\2\113\5\57\1\114\1\57\1\114\1\110\1\64\1\103\7\0\1\116"+
    "\1\64\1\115\2\106\1\122\1\117\2\0\1\121\1\110\1\105\1\65\1\114\1\64\1\111"+
    "\1\114\1\121\1\66\1\105\1\65\2\57\1\64\5\0\1\66\4\0\1\115\2\106\1\37\4\0\1"+
    "\110\1\57\2\114\5\57\1\114\3\57\1\64\1\103\6\0\1\105\1\0\1\64\1\115\2\106"+
    "\2\0\1\117\1\37\1\66\1\110\1\57\2\114\5\57\1\114\2\57\1\110\1\64\1\103\7\0"+
    "\1\33\1\64\1\115\2\106\1\111\4\0\1\110\1\57\2\114\11\57\1\105\1\103\3\0\1"+
    "\33\1\0\1\105\1\117\1\123\1\64\1\115\2\106\2\117\1\124\1\57\1\0\1\110\3\57"+
    "\1\105\1\65\5\57\1\116\2\57\1\103\1\57\1\105\7\0\1\115\2\106\4\0\1\110\13"+
    "\57\1\114\3\0\1\57\1\105\2\0\2\106\1\107\11\0\1\111\1\113\1\67\1\103\1\0\1"+
    "\57\1\110\1\57\1\110\1\125\1\65\1\110\1\114\2\0\1\103\1\57\1\67\2\0\2\106"+
    "\1\107\1\57\10\0\1\66\7\0\2\106\1\126\2\117\3\0\2\57\1\110\10\57\1\66\6\0"+
    "\1\57\1\66\34\0\12\57\1\105\4\0\1\121\2\106\1\107\1\0\1\57\1\64\1\65\1\64"+
    "\1\103\1\111\1\0\1\65\1\66\1\110\2\57\1\64\2\0\1\33\2\106\1\107\1\0\11\15"+
    "\1\75\1\0\1\127\12\57\1\105\123\57\1\114\1\64\1\57\1\105\1\114\1\64\12\57"+
    "\1\114\1\64\10\57\1\114\1\64\1\57\1\105\1\114\1\64\3\57\1\105\16\57\1\114"+
    "\1\64\20\57\1\105\3\0\1\130\4\117\1\131\4\57\4\0\25\15\1\132\1\42\1\133\1"+
    "\110\132\57\1\113\4\57\1\134\5\57\1\105\1\0\22\57\1\105\1\135\1\136\1\57\1"+
    "\66\1\0\3\57\1\114\1\64\3\0\4\57\1\64\3\0\4\57\1\64\3\0\3\57\1\114\1\66\3"+
    "\0\15\57\10\0\1\121\1\0\1\66\2\106\1\107\1\0\2\117\1\120\5\0\2\106\1\107\1"+
    "\0\26\57\2\0\1\57\1\113\10\57\1\67\1\0\21\57\1\64\2\0\7\57\1\105\11\0\1\115"+
    "\2\106\7\57\1\64\1\57\1\66\2\0\13\57\1\0\6\57\1\64\1\0\2\106\1\137\11\0\5"+
    "\57\1\105\2\0\15\57\1\66\12\0\2\106\1\107\1\0\2\106\1\107\2\0\1\121\27\0\1"+
    "\110\13\57\4\0\1\110\1\57\1\0\2\106\1\107\11\0\1\121\7\57\1\66\2\0\1\65\2"+
    "\106\1\112\12\57\1\64\6\0\11\57\7\0\2\106\1\107\1\110\2\106\1\112\10\57\1"+
    "\64\2\42\1\140\27\0\1\110\1\114\1\64\1\111\2\0\13\42\17\57\1\141\3\42\1\63"+
    "\7\42\1\142\11\57\20\0\45\44\1\55\1\42\1\46\30\44\2\42\2\15\1\42\1\133\1\15"+
    "\1\132\2\42\2\15\2\42\2\15\1\42\1\133\1\15\1\132\2\42\2\143\2\42\2\15\3\42"+
    "\1\133\2\42\2\57\2\42\2\57\2\42\2\57\1\42\1\144\1\15\1\145\1\146\1\144\1\15"+
    "\1\66\1\42\1\146\1\15\1\0\2\42\1\15\1\147\1\146\1\144\1\15\1\66\2\150\1\151"+
    "\7\0\1\152\1\153\13\0\1\153\4\0\1\154\1\155\1\156\1\157\2\155\1\156\1\160"+
    "\3\161\1\162\30\0\1\73\1\163\1\164\1\165\1\41\1\127\1\102\1\132\1\0\1\166"+
    "\1\74\1\167\1\15\1\170\1\171\1\54\1\0\1\172\1\133\1\173\14\117\1\174\1\175"+
    "\1\120\1\0\1\176\17\0\1\177\13\0\1\200\14\0\1\201\13\0\1\202\176\0\17\117"+
    "\23\0\1\135\5\117\1\0\1\203\133\0\1\135\7\117\33\0\13\15\1\40\13\42\1\43\1"+
    "\52\1\204\1\45\1\53\1\44\1\50\1\42\1\205\31\44\1\140\1\163\1\206\1\101\2\0"+
    "\1\207\11\42\1\210\1\0\1\211\16\57\1\0\1\121\4\0\5\57\1\105\2\0\1\57\1\105"+
    "\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1"+
    "\105\23\0\1\121\64\0\1\32\1\212\6\0\1\130\1\117\1\120\1\0\1\110\1\64\1\123"+
    "\1\66\1\110\24\57\1\105\1\0\2\110\25\57\1\105\1\57\1\0\1\110\11\57\1\64\1"+
    "\110\26\57\1\105\1\135\1\120\2\0\6\57\1\105\15\0\4\57\10\0\2\117\1\120\7\0"+
    "\2\117\1\130\3\117\10\0\2\117\1\120\11\0\1\130\3\117\20\0\55\57\1\64\22\0"+
    "\65\57\1\64\12\0\43\57\1\66\20\0\13\57\1\64\3\57\1\66\4\57\2\106\1\112\5\0"+
    "\13\44\1\213\3\0\1\121\7\44\1\64\21\57\1\214\2\117\11\0\1\121\2\57\1\101\3"+
    "\44\1\46\17\44\1\63\1\42\1\45\1\51\2\44\1\215\1\216\1\44\1\46\4\44\1\52\1"+
    "\40\1\15\1\44\17\0\1\121\1\217\1\57\2\116\1\105\5\57\1\105\3\0\1\117\1\120"+
    "\2\0\15\57\3\0\1\65\14\57\7\0\2\106\1\107\5\0\1\65\1\57\1\121\1\103\2\106"+
    "\1\112\6\57\1\64\2\0\5\57\1\105\6\0\7\57\1\66\1\0\13\57\1\105\6\0\1\121\2"+
    "\106\1\107\1\0\1\57\1\114\2\57\2\106\1\112\1\105\12\57\1\66\5\0\1\105\2\57"+
    "\1\0\2\106\1\107\1\0\5\57\1\105\1\33\1\65\14\57\1\103\1\111\1\110\1\64\1\67"+
    "\5\0\1\121\1\64\2\57\1\105\1\0\1\65\1\66\2\0\1\110\1\105\1\110\1\105\1\110"+
    "\1\105\2\0\1\57\1\105\1\57\1\105\12\42\1\43\1\57\1\42\1\133\2\0\24\42\10\57"+
    "\1\105\3\0\2\106\1\107\1\0\51\57\3\0\5\57\1\105\1\121\14\57\1\0\33\57\1\64"+
    "\32\57\1\64\11\0\1\42\1\43\2\0\1\220\1\42\1\0\1\125\2\57\1\114\2\57\1\105"+
    "\1\57\1\67\1\116\1\114\32\57\1\64\7\0\1\121\32\57\1\64\4\0\20\57\1\65\15\57"+
    "\12\0\3\57\35\0\1\57\1\114\41\57\1\66\4\0\2\106\1\107\1\0\1\102\5\15\1\40"+
    "\1\0\1\104\5\42\1\43\2\0\1\65\25\57\1\105\1\65\1\57\1\65\1\57\1\65\1\57\1"+
    "\65\1\66\10\0\3\57\1\110\5\57\1\105\4\57\1\105\1\116\3\57\1\64\3\57\1\64\10"+
    "\0\36\57\1\105\2\0\1\221\13\117\3\0\16\117\1\131\3\0\1\135\75\0\7\57\1\66"+
    "\14\57\1\66\3\0\1\130\6\117\1\0\10\57\1\117\3\0\4\57\1\222\1\57\1\223\1\0"+
    "\11\57\1\64\2\0\7\57\1\64\11\57\1\0\2\57\1\130\1\120\12\0\12\15\12\42\23\57"+
    "\1\64\2\106\1\107\1\0\11\15\1\0\11\42\1\0\12\57\2\0\15\57\47\0\15\57\1\105"+
    "\2\0\5\57\1\64\2\0\2\57\46\0\1\57\1\64\1\114\12\57\1\116\1\66\1\113\5\57\1"+
    "\64\2\117\5\57\1\105\1\130\1\117\7\57\1\105\1\0\1\221\2\117\14\0\4\57\1\105"+
    "\1\64\1\221\1\117\5\57\1\214\1\117\1\0\6\57\1\64\21\0\16\57\1\0\1\224\4\117"+
    "\1\135\13\117\1\66\3\0\1\57\2\110\6\57\3\0\2\117\6\0\7\57\1\225\7\57\1\226"+
    "\10\0\2\57\1\110\6\57\1\66\1\221\1\117\4\0\15\57\1\64\2\0\5\57\1\64\2\117"+
    "\4\57\1\105\1\0\2\117\4\57\1\64\5\0\1\130\1\117\24\0\22\57\1\66\15\0\14\15"+
    "\1\40\3\0\14\42\1\43\1\0\1\135\1\117\30\0\7\117\1\37\40\0\1\121\15\57\6\0"+
    "\1\135\4\117\1\227\2\106\4\0\1\121\13\57\10\0\6\57\1\66\1\0\2\106\1\107\1"+
    "\0\1\121\10\57\1\105\3\0\1\115\2\106\4\0\10\57\1\105\1\33\2\0\1\121\13\57"+
    "\1\105\3\0\1\110\1\66\2\0\2\106\1\230\1\66\1\130\4\117\1\131\2\0\4\57\1\116"+
    "\6\57\25\0\1\57\1\105\1\114\1\116\3\57\1\116\2\57\1\66\1\0\13\57\1\105\4\0"+
    "\2\106\1\107\2\0\1\110\1\57\2\113\5\57\1\114\1\57\1\114\1\110\1\64\1\103\4"+
    "\0\1\66\2\0\1\110\1\64\47\0\15\57\1\66\3\0\1\121\1\105\1\0\2\106\1\107\11"+
    "\0\14\57\5\0\1\116\2\0\2\106\1\107\51\0\13\57\1\105\12\0\1\57\11\0\14\57\5"+
    "\0\1\66\2\0\2\106\1\107\11\0\12\57\1\105\5\0\2\106\1\107\15\0\6\57\1\64\5"+
    "\0\2\106\1\126\131\0\10\15\10\42\2\106\1\126\1\117\1\37\2\0\1\121\60\0\16"+
    "\57\1\66\1\0\2\57\1\114\10\57\1\105\4\0\1\66\3\0\2\106\1\126\4\117\1\131\1"+
    "\65\7\57\34\0\46\57\1\64\31\0\33\117\1\37\4\0\61\57\57\0\13\57\1\105\64\0"+
    "\21\57\1\105\56\0\16\57\1\66\1\0\7\57\1\105\2\106\1\107\31\0\7\57\1\64\4\0"+
    "\14\57\4\0\1\57\3\0\2\106\1\231\1\117\1\232\5\57\1\0\1\110\4\57\34\0\21\57"+
    "\1\66\2\0\1\66\17\0\1\121\3\57\20\0\1\66\7\0\73\57\1\66\4\0\74\57\1\105\3"+
    "\0\1\64\77\0\32\57\1\105\1\0\3\57\1\66\2\57\1\66\1\0\2\57\1\64\61\0\4\117"+
    "\1\120\43\0\6\15\1\165\6\42\6\15\1\165\1\42\1\144\4\42\6\15\1\165\6\42\1\74"+
    "\1\73\1\233\1\102\1\74\1\15\1\165\1\210\1\104\1\42\1\104\2\42\6\15\1\165\6"+
    "\42\1\75\1\40\1\102\1\15\1\74\1\15\1\234\6\42\1\75\1\40\1\15\1\166\1\235\1"+
    "\15\1\234\6\42\6\15\1\165\6\42\6\15\1\165\6\42\6\15\1\165\6\42\6\15\1\165"+
    "\6\42\6\15\1\165\6\42\6\15\1\165\6\42\1\133\6\15\1\234\5\42\1\43\1\42\1\54"+
    "\5\15\1\40\6\42\1\144\1\42\6\15\1\234\5\42\1\43\1\42\1\54\5\15\1\40\6\42\1"+
    "\144\1\42\6\15\1\234\5\42\1\43\1\42\1\46\1\115\14\106\61\57\1\236\2\117\14"+
    "\0\10\15\1\165\10\42\3\0\2\106\1\107\51\0\1\57\1\110\6\57\1\111\1\113\1\110"+
    "\1\57\1\105\1\57\1\125\1\0\1\33\1\121\1\125\1\110\1\111\1\113\2\125\1\111"+
    "\1\113\1\105\1\57\1\105\1\57\1\110\1\67\2\57\1\116\4\57\1\0\2\110\1\116\4"+
    "\57\21\0\3\117\1\131\74\0\65\57\1\105\12\0\15\57\1\66\2\0\67\57\1\64\140\57"+
    "\1\64\27\0\7\57\1\64\70\0");

  /* The ZZ_CMAP_A table has 636 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\1\2\2\3\1\1\2\0\1\3\1\51\1\23\1\50\2\0\1\46\1\22\1\66\1\67\1\60\1"+
    "\6\1\53\1\37\1\55\1\56\1\7\7\12\2\5\1\35\1\54\1\42\1\44\1\40\1\52\1\61\6\27"+
    "\5\26\1\31\1\26\1\32\1\26\1\30\2\26\1\70\1\24\1\71\1\0\1\57\1\74\1\101\1\10"+
    "\1\77\1\75\1\20\1\21\1\105\1\114\1\104\2\34\1\13\1\106\1\14\1\100\1\102\1"+
    "\107\1\103\1\112\1\76\1\110\1\115\1\113\1\11\1\111\1\34\1\72\1\47\1\73\1\62"+
    "\2\0\1\3\2\0\1\3\5\0\1\33\3\0\2\15\1\25\1\34\3\0\1\15\1\33\1\0\3\25\1\0\3"+
    "\26\1\0\3\26\10\34\1\0\1\26\1\34\1\26\2\34\1\26\1\34\1\26\2\34\1\26\1\34\2"+
    "\26\1\34\1\26\1\34\1\26\3\34\2\26\1\34\1\26\1\34\2\26\1\34\3\26\2\34\3\26"+
    "\3\34\1\26\2\34\5\33\1\26\1\33\1\34\1\26\1\33\1\34\1\26\1\33\1\34\1\26\1\33"+
    "\1\34\1\33\3\34\2\33\4\0\3\33\3\0\1\33\1\0\1\33\1\0\1\33\1\0\1\26\1\34\2\0"+
    "\1\33\3\34\1\0\1\26\2\0\1\26\1\0\1\26\1\0\4\26\1\0\1\26\3\34\2\26\1\34\1\0"+
    "\2\26\1\34\4\0\1\26\1\34\1\0\3\26\1\0\1\33\3\0\3\34\3\33\1\0\6\4\3\0\3\33"+
    "\1\0\2\33\1\0\2\4\3\33\2\0\2\33\1\0\2\33\2\0\2\4\2\33\1\0\1\33\6\25\5\0\1"+
    "\33\1\0\1\33\5\25\1\33\1\25\1\0\2\33\1\0\1\33\1\0\1\33\2\4\2\25\1\0\1\26\3"+
    "\0\4\25\3\0\2\26\2\0\2\34\2\0\1\3\3\33\2\0\3\25\3\33\2\4\1\25\1\0\1\34\3\0"+
    "\3\33\4\34\1\33\1\0\1\26\1\0\1\26\1\34\1\0\2\34\1\33\1\0\1\34\3\0\2\34\1\26"+
    "\3\0\7\3\1\0\2\3\5\0\1\3\1\15\1\16\2\0\6\15\5\17\1\16\4\17\5\16\6\0\1\26\2"+
    "\0\1\34\3\26\2\34\1\26\1\0\1\26\1\0\2\26\1\0\2\34\4\33\1\34\3\0\1\26\2\34"+
    "\2\0\1\34\1\0\3\25\1\26\1\34\3\25\1\43\1\0\1\41\3\0\1\45\1\0\1\63\6\0\1\36"+
    "\1\64\1\65\3\0\1\60\2\0\1\26\2\34\1\26\2\33\2\26\1\34\1\26\1\34\2\0\1\25\2"+
    "\0\2\34\1\0\1\34\1\0\1\34\3\0\2\33\1\25\1\26\1\34\1\33\1\0\2\33\2\25\1\33"+
    "\2\0\1\26\1\34\1\26\1\34\3\33\1\34\1\33\3\0\1\34\3\0\1\25\1\33\1\25\4\33\1"+
    "\25\1\0\2\25\3\33\2\25\1\0\1\33\5\25\4\4\1\33\1\0\2\4\1\0\3\25\1\0\1\33\1"+
    "\0\2\26\1\0\1\26\1\0\2\34\2\0\2\26\1\33\2\0\1\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\1\1\5"+
    "\4\6\2\7\2\6\2\4\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\1\1\16\1\4\1\17\1\1"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\16\6\1\45"+
    "\1\46\5\47\1\50\1\51\1\0\1\5\3\0\3\5"+
    "\1\0\11\6\1\0\1\52\2\0\1\53\1\0\1\11"+
    "\1\54\1\55\1\56\1\57\1\60\1\0\1\61\1\62"+
    "\1\63\1\64\1\0\1\65\3\6\1\66\5\6\1\67"+
    "\10\6\1\70\7\6\1\45\1\0\1\71\1\72\1\73"+
    "\1\74\1\75\6\0\1\5\1\76\10\6\1\0\1\77"+
    "\1\0\1\100\1\101\15\6\1\102\1\6\1\103\4\6"+
    "\1\104\3\6\1\105\7\6\1\106\6\0\1\6\1\107"+
    "\1\110\4\6\1\111\1\112\1\0\3\6\1\113\1\114"+
    "\5\6\1\115\7\6\1\116\16\6\2\0\1\5\3\0"+
    "\1\117\2\6\1\120\4\6\1\0\4\6\1\121\1\122"+
    "\1\123\12\6\1\124\5\6\1\125\3\6\1\126\2\6"+
    "\1\0\2\5\1\127\1\130\1\131\3\6\1\0\1\101"+
    "\1\132\1\6\1\133\7\6\1\134\5\6\1\135\1\105"+
    "\1\136\1\137\1\140\1\141\1\6\1\142\1\6\1\143"+
    "\1\144\1\145\1\6\1\146\1\147\1\150\1\151\1\152"+
    "\2\6\1\116\1\153\1\6\1\154\1\6\1\155\1\156"+
    "\5\6\1\157\3\6\1\160\2\6\1\161\1\162\1\6"+
    "\1\163\1\6\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u0186\0\u057c\0\u05ca\0\u0618\0\u0666\0\u0186"+
    "\0\u052e\0\u06b4\0\u0702\0\u0186\0\u0750\0\u0186\0\u079e\0\u0186"+
    "\0\u07ec\0\u0186\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0186\0\u052e"+
    "\0\u0186\0\u0972\0\u09c0\0\u052e\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0a0e\0\u052e\0\u052e\0\u052e\0\u0a5c\0\u052e"+
    "\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc"+
    "\0\u0d1a\0\u0d68\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u052e\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u052e\0\u052e"+
    "\0\u02be\0\u052e\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296"+
    "\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506"+
    "\0\u1554\0\u15a2\0\u0618\0\u052e\0\u15f0\0\u0666\0\u052e\0\u163e"+
    "\0\u168c\0\u16da\0\u0186\0\u0186\0\u0186\0\u0186\0\u1728\0\u1776"+
    "\0\u052e\0\u0186\0\u052e\0\u17c4\0\u052e\0\u1812\0\u1860\0\u18ae"+
    "\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34\0\u1a82\0\u0444\0\u1ad0"+
    "\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4\0\u1cf2\0\u0444"+
    "\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62"+
    "\0\u1f62\0\u052e\0\u052e\0\u052e\0\u052e\0\u052e\0\u1fb0\0\u1ffe"+
    "\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u0444\0\u21d2\0\u2220"+
    "\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490"+
    "\0\u2490\0\u052e\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664"+
    "\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u0444\0\u2922\0\u0444\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18"+
    "\0\u2d66\0\u2db4\0\u2e02\0\u052e\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a"+
    "\0\u2f88\0\u2fd6\0\u3024\0\u0444\0\u0444\0\u3072\0\u30c0\0\u310e"+
    "\0\u315c\0\u31aa\0\u0444\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u0444"+
    "\0\u0444\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468\0\u0444\0\u34b6"+
    "\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726"+
    "\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u3948\0\u3996"+
    "\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06"+
    "\0\u3c54\0\u3ca2\0\u3cf0\0\u0444\0\u3d3e\0\u3d8c\0\u0444\0\u3dda"+
    "\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a"+
    "\0\u0444\0\u0444\0\u0444\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0"+
    "\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356\0\u0444\0\u43a4\0\u43f2"+
    "\0\u4440\0\u448e\0\u44dc\0\u0444\0\u452a\0\u4578\0\u45c6\0\u0444"+
    "\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u0444\0\u0444\0\u0444"+
    "\0\u479a\0\u47e8\0\u4836\0\u4884\0\u0444\0\u0444\0\u48d2\0\u0444"+
    "\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u0444"+
    "\0\u4b42\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u0444\0\u0444\0\u0444"+
    "\0\u0444\0\u0444\0\u0444\0\u4cc8\0\u46b0\0\u4d16\0\u0444\0\u0444"+
    "\0\u052e\0\u4d64\0\u0444\0\u4db2\0\u0444\0\u0444\0\u0444\0\u4e00"+
    "\0\u4e4e\0\u0444\0\u0444\0\u4e9c\0\u0444\0\u4eea\0\u0444\0\u0444"+
    "\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u0444\0\u50be\0\u510c"+
    "\0\u515a\0\u0444\0\u51a8\0\u51f6\0\u0444\0\u0444\0\u5244\0\u0444"+
    "\0\u5292\0\u0444";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\13\1\20\1\21\2\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\5\32\1\31\1\17"+
    "\1\33\1\34\1\35\1\6\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\17\1\102\1\103\1\104\1\17\1\105\1\106\1\107"+
    "\1\17\55\31\1\110\115\31\1\111\40\31\56\112\1\113"+
    "\1\112\1\114\74\112\1\115\32\112\1\116\23\112\1\6"+
    "\5\0\1\6\10\0\1\6\4\0\1\6\10\0\16\6"+
    "\1\0\3\6\1\0\6\6\32\0\1\10\52\0\1\117"+
    "\115\0\1\117\115\0\1\120\44\0\2\121\1\0\1\121"+
    "\2\0\1\121\1\0\1\122\15\0\1\122\22\0\1\123"+
    "\1\0\1\124\42\0\2\13\1\0\1\13\2\0\1\13"+
    "\2\122\14\0\2\122\22\0\1\123\1\0\1\125\36\0"+
    "\1\6\4\0\1\126\1\6\1\127\2\0\1\126\4\0"+
    "\1\6\4\0\1\6\10\0\16\6\1\0\3\6\1\0"+
    "\6\6\34\0\2\121\1\0\1\130\1\0\1\131\1\130"+
    "\2\122\13\0\1\131\2\122\22\0\1\123\1\0\1\124"+
    "\42\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\13\17\1\133"+
    "\5\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\7\17\1\134"+
    "\11\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\4\17"+
    "\1\135\14\17\122\0\2\17\1\0\2\17\1\136\3\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\15\17\1\137\3\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\3\17\1\140\2\17\1\141\1\142"+
    "\11\17\2\143\1\0\17\143\1\144\1\143\1\145\71\143"+
    "\23\146\1\147\1\150\71\146\4\0\2\32\1\0\6\32"+
    "\1\0\1\32\1\0\2\32\1\151\3\0\7\32\22\0"+
    "\1\32\15\0\21\32\1\6\5\0\1\6\10\0\1\6"+
    "\4\0\1\6\10\0\1\34\15\6\1\0\3\6\1\0"+
    "\6\6\30\0\1\6\4\0\1\126\1\6\1\127\2\0"+
    "\1\126\4\0\1\6\4\0\1\6\10\0\2\6\1\152"+
    "\1\36\12\6\1\0\3\6\1\0\6\6\30\0\1\6"+
    "\5\0\1\6\10\0\1\6\4\0\1\6\10\0\2\6"+
    "\1\40\13\6\1\0\3\6\1\0\6\6\30\0\1\6"+
    "\5\0\1\6\10\0\1\6\4\0\1\6\10\0\3\6"+
    "\1\42\3\6\1\153\6\6\1\0\3\6\1\0\6\6"+
    "\30\0\1\6\5\0\1\6\10\0\1\6\4\0\1\6"+
    "\10\0\11\6\1\154\4\6\1\0\3\6\1\0\6\6"+
    "\30\0\1\6\5\0\1\6\10\0\1\6\4\0\1\6"+
    "\10\0\12\6\1\155\3\6\1\0\3\6\1\0\6\6"+
    "\30\0\2\45\1\0\113\45\1\6\5\0\1\6\10\0"+
    "\1\6\4\0\1\6\10\0\7\6\1\156\6\6\1\0"+
    "\3\6\1\0\6\6\26\0\1\157\56\0\1\160\11\0"+
    "\1\161\26\0\1\6\5\0\1\6\10\0\1\6\4\0"+
    "\1\6\10\0\16\6\1\0\3\6\1\0\1\162\5\6"+
    "\105\0\1\163\77\0\1\164\133\0\1\165\44\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\166\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\13\17\1\167\5\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\170"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\3\17"+
    "\1\171\1\172\1\17\1\173\5\17\1\174\4\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\3\17\1\175\7\17"+
    "\1\176\5\17\4\0\2\17\1\0\5\17\1\177\1\0"+
    "\1\17\1\0\1\17\1\200\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\6\17\1\201\12\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\202\1\203\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\3\17\1\204\2\17\1\205"+
    "\12\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\1\206\1\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\5\17\1\207\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\1\210\20\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\3\17\1\211\15\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\13\17\1\212\5\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\5\17\1\213\13\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\214\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\14\17\1\215\4\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\17\17\1\216\1\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\7\17\1\217"+
    "\11\17\1\220\5\0\1\220\10\0\1\220\4\0\1\220"+
    "\10\0\7\220\1\221\2\220\1\221\3\220\1\0\1\220"+
    "\1\222\1\220\1\0\6\220\30\0\1\220\3\223\2\0"+
    "\1\220\10\0\1\220\4\0\1\220\10\0\7\220\1\221"+
    "\2\220\1\221\3\220\1\0\1\220\1\222\1\220\1\0"+
    "\6\220\1\0\1\223\106\0\1\224\113\0\1\225\132\0"+
    "\1\226\61\0\1\227\62\0\2\230\1\0\1\230\2\0"+
    "\1\230\107\0\2\231\1\0\1\231\2\0\1\231\107\0"+
    "\2\232\1\0\1\232\2\0\1\232\107\0\2\126\1\0"+
    "\1\126\2\0\1\126\1\122\15\0\1\122\25\0\1\233"+
    "\51\0\1\122\15\0\1\122\70\0\2\121\1\0\1\121"+
    "\2\0\1\121\2\122\14\0\2\122\22\0\1\123\1\0"+
    "\1\234\43\0\1\235\1\0\2\235\1\0\1\235\5\0"+
    "\2\235\5\0\1\235\45\0\1\235\1\0\1\235\1\0"+
    "\1\235\36\0\1\132\77\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\15\17\1\236\3\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\11\17\1\237\7\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\11\17\1\240\7\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\241\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\5\17\1\242\13\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\2\17\1\243"+
    "\16\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\244\12\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\3\17\1\245\15\17\4\0\2\17\1\0\4\17\1\246"+
    "\1\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\21\17\1\143\3\0\112\143\1\146"+
    "\3\0\112\146\22\0\1\151\73\0\2\152\1\0\113\152"+
    "\104\0\1\247\11\0\1\250\5\0\1\250\10\0\1\250"+
    "\4\0\1\250\10\0\7\250\1\251\2\250\1\251\3\250"+
    "\1\0\1\250\1\0\1\250\1\0\6\250\67\0\1\252"+
    "\62\0\2\17\1\0\4\17\1\253\1\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\11\17\1\254\3\17\1\255\3\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\11\17\1\256\7\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\11\17\1\257\7\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\1\17\1\260\4\17"+
    "\1\261\2\17\1\262\7\17\4\0\2\17\1\0\1\17"+
    "\1\263\4\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\7\17\1\264\11\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\5\17\1\265\13\17\4\0"+
    "\2\17\1\0\5\17\1\266\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\11\17\1\267"+
    "\7\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\270\12\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\17\1\271\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\7\17\1\272\11\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\1\273\20\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\1\17\1\274\17\17\4\0\2\17\1\0\4\17"+
    "\1\275\1\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\3\17\1\276\3\17\1\277\11\17"+
    "\4\0\2\17\1\0\4\17\1\300\1\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\2\17\1\301\15\17\1\302\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\15\17\1\303\3\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\304\20\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\305\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\306\20\17\4\0\2\17\1\0"+
    "\4\17\1\307\1\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\15\17\1\310\3\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\1\311\1\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\1\312\14\17\1\313"+
    "\3\17\1\220\5\0\1\220\10\0\1\220\4\0\1\220"+
    "\10\0\16\220\1\0\3\220\1\0\6\220\67\0\1\314"+
    "\62\0\2\230\1\0\1\230\2\0\1\230\42\0\1\315"+
    "\44\0\2\316\1\0\1\316\2\0\1\316\107\0\2\317"+
    "\1\0\1\317\2\0\1\317\107\0\2\320\1\0\1\320"+
    "\2\0\1\320\107\0\2\231\1\0\1\321\2\0\1\321"+
    "\116\0\1\122\15\0\1\122\25\0\1\322\42\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\7\17\1\323\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\1\324\1\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\2\17\1\325\16\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\4\17\1\326"+
    "\14\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\4\17"+
    "\1\327\14\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\2\17\1\330\6\17\1\331\7\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\11\17\1\332\7\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\333\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\75\0\1\334"+
    "\20\0\1\250\5\0\1\250\10\0\1\250\4\0\1\250"+
    "\10\0\16\250\1\0\3\250\1\0\6\250\34\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\335\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\3\17\1\336\15\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\2\17\1\337\16\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\5\17\1\340"+
    "\13\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\5\17"+
    "\1\341\13\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\14\17\1\342\4\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\343\1\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\7\17\1\344\11\17\4\0\2\17\1\0\4\17"+
    "\1\345\1\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\10\17\1\346\10\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\347\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\5\17\1\350\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\5\17\1\351\3\17\1\352"+
    "\7\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\353\12\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\10\17\1\354\10\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\6\17\1\355\12\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\7\17\1\356\11\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\10\17\1\357\1\360\7\17\4\0"+
    "\2\17\1\0\5\17\1\361\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\4\17\1\362\14\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\13\17\1\363"+
    "\5\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\7\17"+
    "\1\364\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\365\1\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\7\17\1\366\11\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\6\17\1\367\12\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\4\17\1\370\14\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\371\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\17\1\372\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\6\17\1\373\12\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\1\374\20\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\1\17\1\375\17\17"+
    "\4\0\2\376\1\0\1\376\2\0\1\376\107\0\2\377"+
    "\1\0\1\377\2\0\1\377\107\0\2\u0100\1\0\1\u0100"+
    "\2\0\1\u0100\107\0\2\u0101\1\0\1\u0101\2\0\1\u0101"+
    "\107\0\2\316\1\0\1\u0102\2\0\1\u0102\110\0\1\u0103"+
    "\1\0\2\u0103\1\0\1\u0103\5\0\2\u0103\5\0\1\u0103"+
    "\45\0\1\u0103\1\0\1\u0103\1\0\1\u0103\20\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\1\17\1\u0104\17\17\4\0"+
    "\2\17\1\0\5\17\1\u0105\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\5\17\1\u0106\13\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u0107"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\4\17\1\u0108"+
    "\14\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\1\17"+
    "\1\u0109\4\17\1\u010a\2\17\1\u010b\7\17\75\0\1\u010c"+
    "\24\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\1\17\1\u010d"+
    "\17\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\1\17"+
    "\1\u010e\17\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\6\17\1\u010f\12\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\5\17\1\u0110\13\17\4\0\2\17\1\0\4\17"+
    "\1\u0111\1\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\u0112\20\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\u0113\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\10\17\1\u0114\10\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\u0115\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\7\17\1\u0116\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\4\17\1\u0117\14\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u0118"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\7\17\1\u0119"+
    "\11\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\7\17"+
    "\1\u011a\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\2\17\1\u011b\16\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\6\17\1\u011c\12\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\3\17\1\u011d\15\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\17\1\u011e\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\1\17\1\u011f\17\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\6\17\1\u0120\12\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\15\17\1\u0121"+
    "\3\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\u0122\12\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\17\1\u0123\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\14\17\1\u0124\4\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\1\17\1\u0125\17\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\2\17\1\u0126\16\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\u0127\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\u0128\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\u0129\1\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\3\17\1\u012a\15\17\4\0\2\376"+
    "\1\0\1\376\2\0\1\376\42\0\1\u012b\54\0\1\122"+
    "\15\0\1\122\24\0\1\124\51\0\2\122\14\0\2\122"+
    "\24\0\1\125\42\0\2\u012c\1\0\1\u012c\2\0\1\u012c"+
    "\107\0\2\377\1\0\1\u012d\2\0\1\u012d\110\0\1\131"+
    "\1\0\2\131\1\0\1\131\5\0\2\131\5\0\1\131"+
    "\45\0\1\131\1\0\1\131\1\0\1\131\20\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\1\u012e\20\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\u012f\1\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\1\17\1\u0130\17\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\14\17\1\u0131\4\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u0132"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\7\17\1\u0133"+
    "\11\17\20\0\1\u0134\101\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\u0135\1\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\u0136\1\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\7\17\1\u0137\11\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\1\u0138\1\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\21\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\1\u0139\1\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\21\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\2\17\1\u013a\16\17\4\0\2\17\1\0"+
    "\4\17\1\u013b\1\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\5\17\1\u013c\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\5\17\1\u013d\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\5\17\1\u013e\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\1\17\1\u013f\4\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\14\17\1\u0140\4\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\4\17\1\u0141"+
    "\14\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\1\17"+
    "\1\u0142\17\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\7\17\1\u0143\11\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\15\17\1\u0144\3\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\7\17\1\u0145\11\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\17\1\u0146\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\14\17\1\u0147\4\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\1\u0148\1\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\1\17\1\u0149\17\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\11\17\1\u014a"+
    "\7\17\4\0\2\17\1\0\5\17\1\u014b\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\u014c\12\17\4\0\2\u014d\1\0\1\u014d\2\0\1\u014d"+
    "\116\0\1\122\15\0\1\122\25\0\1\233\51\0\2\122"+
    "\14\0\2\122\24\0\1\234\42\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\5\17\1\u014e\13\17\4\0\2\17\1\0"+
    "\4\17\1\u014f\1\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\1\u0150\20\17\14\0\1\u0151"+
    "\105\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\5\17\1\u0152"+
    "\13\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\6\17"+
    "\1\u0153\12\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\1\17\1\u0154\17\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\u0155\1\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\1\u0156\20\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\1\17\1\u0157\17\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\4\17\1\u0158\14\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\13\17\1\u0159\5\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\11\17\1\u015a\7\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\1\u015b\1\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\3\17\1\u015c\15\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u015d"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\3\17\1\u015e"+
    "\15\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\14\17"+
    "\1\u015f\4\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\u0160\1\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\1\17\1\u0161\17\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\7\17\1\u0162\11\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\1\17\1\u0163\17\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\132\3\0\7\17"+
    "\22\0\1\17\15\0\1\17\1\u0164\17\17\4\0\2\17"+
    "\1\0\5\17\1\u0165\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\5\17\1\u0166\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\132\3\0"+
    "\7\17\22\0\1\17\15\0\7\17\1\u0167\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\132"+
    "\3\0\7\17\22\0\1\17\15\0\3\17\1\u0168\15\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u0169"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\u016a"+
    "\1\17\1\132\3\0\7\17\22\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\132\3\0\7\17\22\0\1\17\15\0\15\17\1\u016b"+
    "\3\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\132\3\0\7\17\22\0\1\17\15\0\3\17"+
    "\1\u016c\15\17\4\0\2\17\1\0\5\17\1\u016d\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\1\u016e\20\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\132\3\0\7\17\22\0\1\17\15\0"+
    "\17\17\1\u016f\1\17\4\0\2\17\1\0\5\17\1\u0170"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\132\3\0\7\17\22\0\1\17"+
    "\15\0\7\17\1\u0171\11\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\132\3\0\7\17\22\0"+
    "\1\17\15\0\5\17\1\u0172\13\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\14\1\1\11\6\1\1\11\16\1\1\11\3\1"+
    "\1\11\7\1\3\11\1\1\1\11\21\1\1\11\4\1"+
    "\2\11\1\0\1\11\3\0\3\1\1\0\11\1\1\0"+
    "\1\11\2\0\1\11\1\0\6\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\33\1\1\0\5\11\6\0"+
    "\12\1\1\0\1\1\1\0\1\11\41\1\1\11\6\0"+
    "\11\1\1\0\41\1\2\0\1\1\3\0\10\1\1\0"+
    "\36\1\1\0\10\1\1\0\34\1\1\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int blockCommentDepth;
    private int blockDocDepth;
    private int blockCommentStartPos;
    private int blockDocStartPos;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              yybegin(YYINITIAL);
            zzStartRead = blockCommentStartPos;
            return TokenType.BAD_CHARACTER;
            }  // fall though
            case 371: break;
            case BLOCK_DOC: {
              yybegin(YYINITIAL);
            zzStartRead = blockDocStartPos;
            return TokenType.BAD_CHARACTER;
            }  // fall though
            case 372: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 117: break;
          case 2: 
            { return MQLTypes.NEW_LINE;
            } 
            // fall through
          case 118: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 119: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 120: break;
          case 5: 
            { return MQLTypes.INTEGER;
            } 
            // fall through
          case 121: break;
          case 6: 
            { return MQLTypes.VARID;
            } 
            // fall through
          case 122: break;
          case 7: 
            { return MQLTypes.SUPER_OR_SUBSCRIPT;
            } 
            // fall through
          case 123: break;
          case 8: 
            { return MQLTypes.BACK_SLASH;
            } 
            // fall through
          case 124: break;
          case 9: 
            { return MQLTypes.CONID;
            } 
            // fall through
          case 125: break;
          case 10: 
            { return MQLTypes.COLON;
            } 
            // fall through
          case 126: break;
          case 11: 
            { return MQLTypes.DOUBLE_COLON;
            } 
            // fall through
          case 127: break;
          case 12: 
            { return MQLTypes.DASH;
            } 
            // fall through
          case 128: break;
          case 13: 
            { return MQLTypes.RIGHT_ARROW;
            } 
            // fall through
          case 129: break;
          case 14: 
            { return MQLTypes.LEFT_ARROW;
            } 
            // fall through
          case 130: break;
          case 15: 
            { return MQLTypes.DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 131: break;
          case 16: 
            { return MQLTypes.VERTICAL_BAR;
            } 
            // fall through
          case 132: break;
          case 17: 
            { return MQLTypes.LINE_DOC;
            } 
            // fall through
          case 133: break;
          case 18: 
            { return MQLTypes.EXLAMATION_MARK;
            } 
            // fall through
          case 134: break;
          case 19: 
            { return MQLTypes.QUESTION_MARK;
            } 
            // fall through
          case 135: break;
          case 20: 
            { return MQLTypes.COMMA;
            } 
            // fall through
          case 136: break;
          case 21: 
            { return MQLTypes.SEMICOLON;
            } 
            // fall through
          case 137: break;
          case 22: 
            { return MQLTypes.DOT;
            } 
            // fall through
          case 138: break;
          case 23: 
            { return MQLTypes.UNDERSCORE;
            } 
            // fall through
          case 139: break;
          case 24: 
            { return MQLTypes.STAR;
            } 
            // fall through
          case 140: break;
          case 25: 
            { return MQLTypes.AT;
            } 
            // fall through
          case 141: break;
          case 26: 
            { return MQLTypes.TILDA;
            } 
            // fall through
          case 142: break;
          case 27: 
            { return MQLTypes.FORALL;
            } 
            // fall through
          case 143: break;
          case 28: 
            { return MQLTypes.LEQ;
            } 
            // fall through
          case 144: break;
          case 29: 
            { return MQLTypes.GEQ;
            } 
            // fall through
          case 145: break;
          case 30: 
            { return MQLTypes.LEFT_PAREN;
            } 
            // fall through
          case 146: break;
          case 31: 
            { return MQLTypes.RIGHT_PAREN;
            } 
            // fall through
          case 147: break;
          case 32: 
            { return MQLTypes.LEFT_BRACKET;
            } 
            // fall through
          case 148: break;
          case 33: 
            { return MQLTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 149: break;
          case 34: 
            { return MQLTypes.LEFT_BRACE;
            } 
            // fall through
          case 150: break;
          case 35: 
            { return MQLTypes.RIGHT_BRACE;
            } 
            // fall through
          case 151: break;
          case 36: 
            { return MQLTypes.BACK_QUOTE;
            } 
            // fall through
          case 152: break;
          case 37: 
            { yybegin(YYINITIAL); return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 153: break;
          case 38: 
            { yybegin(YYINITIAL); return MQLTypes.DOT;
            } 
            // fall through
          case 154: break;
          case 39: 
            { 
            } 
            // fall through
          case 155: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MAYBE_FIRST_DOT_OPERATOR); return MQLTypes.NEW_LINE;
            } 
            // fall through
          case 156: break;
          case 41: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MAYBE_FIRST_DOT_OPERATOR); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 157: break;
          case 42: 
            { return MQLTypes.CHAR;
            } 
            // fall through
          case 158: break;
          case 43: 
            { return MQLTypes.STRING;
            } 
            // fall through
          case 159: break;
          case 44: 
            { return MQLTypes.LINE_COMMENT;
            } 
            // fall through
          case 160: break;
          case 45: 
            { return MQLTypes.EQUAL;
            } 
            // fall through
          case 161: break;
          case 46: 
            { return MQLTypes.AND;
            } 
            // fall through
          case 162: break;
          case 47: 
            { return MQLTypes.OR;
            } 
            // fall through
          case 163: break;
          case 48: 
            { return MQLTypes.NOT_EQUAL;
            } 
            // fall through
          case 164: break;
          case 49: 
            { return MQLTypes.DOUBLE_DOT;
            } 
            // fall through
          case 165: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 166: break;
          case 51: 
            { blockCommentDepth = 0; blockCommentStartPos = getTokenStart(); yybegin(BLOCK_COMMENT);
            } 
            // fall through
          case 167: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.LEFT_PAREN;
            } 
            // fall through
          case 168: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.BACK_QUOTE;
            } 
            // fall through
          case 169: break;
          case 54: 
            { return MQLTypes.TO;
            } 
            // fall through
          case 170: break;
          case 55: 
            { return MQLTypes.ON;
            } 
            // fall through
          case 171: break;
          case 56: 
            { return MQLTypes.ID;
            } 
            // fall through
          case 172: break;
          case 57: 
            { yybegin(YYINITIAL); return MQLTypes.DOUBLE_DOT;
            } 
            // fall through
          case 173: break;
          case 58: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(YYINITIAL); return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 174: break;
          case 59: 
            { blockCommentDepth++;
            } 
            // fall through
          case 175: break;
          case 60: 
            { blockCommentDepth--;
            if (blockCommentDepth == -1) {
                yybegin(YYINITIAL);
                zzStartRead = blockCommentStartPos;
                return MQLTypes.BLOCK_COMMENT;
            }
            } 
            // fall through
          case 176: break;
          case 61: 
            { blockDocDepth--;
            if (blockDocDepth == -1) {
                yybegin(YYINITIAL);
                zzStartRead = blockDocStartPos;
                return MQLTypes.BLOCK_DOC;
            }
            } 
            // fall through
          case 177: break;
          case 62: 
            { return MQLTypes.BUS;
            } 
            // fall through
          case 178: break;
          case 63: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.DOT;
            } 
            // fall through
          case 179: break;
          case 64: 
            { blockDocDepth = 0; blockDocStartPos = getTokenStart(); yybegin(BLOCK_DOC);
            } 
            // fall through
          case 180: break;
          case 65: 
            { return MQLTypes.DELETE;
            } 
            // fall through
          case 181: break;
          case 66: 
            { return MQLTypes.OFF;
            } 
            // fall through
          case 182: break;
          case 67: 
            { return MQLTypes.ADD;
            } 
            // fall through
          case 183: break;
          case 68: 
            { return MQLTypes.REL;
            } 
            // fall through
          case 184: break;
          case 69: 
            { return MQLTypes.MODIFY;
            } 
            // fall through
          case 185: break;
          case 70: 
            { blockDocDepth++;
            } 
            // fall through
          case 186: break;
          case 71: 
            { return MQLTypes.NAME;
            } 
            // fall through
          case 187: break;
          case 72: 
            { return MQLTypes.EXEC;
            } 
            // fall through
          case 188: break;
          case 73: 
            { return MQLTypes.FROM;
            } 
            // fall through
          case 189: break;
          case 74: 
            { return MQLTypes.FILE;
            } 
            // fall through
          case 190: break;
          case 75: 
            { return MQLTypes.DUMP;
            } 
            // fall through
          case 191: break;
          case 76: 
            { return MQLTypes.TEMP;
            } 
            // fall through
          case 192: break;
          case 77: 
            { return MQLTypes.TYPE;
            } 
            // fall through
          case 193: break;
          case 78: 
            { return MQLTypes.PROGRAM;
            } 
            // fall through
          case 194: break;
          case 79: 
            { return MQLTypes.LIMIT;
            } 
            // fall through
          case 195: break;
          case 80: 
            { return MQLTypes.FORCE;
            } 
            // fall through
          case 196: break;
          case 81: 
            { return MQLTypes.TOREL;
            } 
            // fall through
          case 197: break;
          case 82: 
            { return MQLTypes.TOMID;
            } 
            // fall through
          case 198: break;
          case 83: 
            { return MQLTypes.TABLE;
            } 
            // fall through
          case 199: break;
          case 84: 
            { return MQLTypes.PRINT;
            } 
            // fall through
          case 200: break;
          case 85: 
            { return MQLTypes.QUERY;
            } 
            // fall through
          case 201: break;
          case 86: 
            { return MQLTypes.WHERE;
            } 
            // fall through
          case 202: break;
          case 87: 
            { return MQLTypes.EXPAND;
            } 
            // fall through
          case 203: break;
          case 88: 
            { return MQLTypes.ESCAPE;
            } 
            // fall through
          case 204: break;
          case 89: 
            { return MQLTypes.FORMAT;
            } 
            // fall through
          case 205: break;
          case 90: 
            { return MQLTypes.DEMOTE;
            } 
            // fall through
          case 206: break;
          case 91: 
            { return MQLTypes.TOTYPE;
            } 
            // fall through
          case 207: break;
          case 92: 
            { return MQLTypes.POLICY;
            } 
            // fall through
          case 208: break;
          case 93: 
            { return MQLTypes.INSERT;
            } 
            // fall through
          case 209: break;
          case 94: 
            { return MQLTypes.UPDATE;
            } 
            // fall through
          case 210: break;
          case 95: 
            { return MQLTypes.SELECT;
            } 
            // fall through
          case 211: break;
          case 96: 
            { return MQLTypes.SYSTEM;
            } 
            // fall through
          case 212: break;
          case 97: 
            { return MQLTypes.HIDDEN;
            } 
            // fall through
          case 213: break;
          case 98: 
            { return MQLTypes.BUSID;
            } 
            // fall through
          case 214: break;
          case 99: 
            { return MQLTypes.FROMREL;
            } 
            // fall through
          case 215: break;
          case 100: 
            { return MQLTypes.FROMMID;
            } 
            // fall through
          case 216: break;
          case 101: 
            { return MQLTypes.NOT_HIDDEN;
            } 
            // fall through
          case 217: break;
          case 102: 
            { return MQLTypes.TRIGGER;
            } 
            // fall through
          case 218: break;
          case 103: 
            { return MQLTypes.CONNECT;
            } 
            // fall through
          case 219: break;
          case 104: 
            { return MQLTypes.COMPILE;
            } 
            // fall through
          case 220: break;
          case 105: 
            { return MQLTypes.COMMAND;
            } 
            // fall through
          case 221: break;
          case 106: 
            { return MQLTypes.CURRENT;
            } 
            // fall through
          case 222: break;
          case 107: 
            { return MQLTypes.PROMOTE;
            } 
            // fall through
          case 223: break;
          case 108: 
            { return MQLTypes.RECURSE;
            } 
            // fall through
          case 224: break;
          case 109: 
            { return MQLTypes.HISTORY;
            } 
            // fall through
          case 225: break;
          case 110: 
            { return MQLTypes.FROMTYPE;
            } 
            // fall through
          case 226: break;
          case 111: 
            { return MQLTypes.REVISION;
            } 
            // fall through
          case 227: break;
          case 112: 
            { return MQLTypes.ATTRIBUTE;
            } 
            // fall through
          case 228: break;
          case 113: 
            { return MQLTypes.CONNECTION;
            } 
            // fall through
          case 229: break;
          case 114: 
            { return MQLTypes.ORIGINATED;
            } 
            // fall through
          case 230: break;
          case 115: 
            { return MQLTypes.DESCRIPTION;
            } 
            // fall through
          case 231: break;
          case 116: 
            { return MQLTypes.RELATIONSHIP;
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
