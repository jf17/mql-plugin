/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package ru.jf17.mql.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import ru.jf17.mql.psi.MQLTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>C:/Users/Alex/Documents/GitHub/fork/mql-plugin/src/main/java/ru/jf17/mql/lexer/MQLLexer.flex</tt>
 */
class MQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FIRST_DOT_OPERATOR = 2;
  public static final int MAYBE_FIRST_DOT_OPERATOR = 4;
  public static final int BLOCK_COMMENT = 6;
  public static final int BLOCK_DOC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\42\1\44\1\45\4\42\1\46\1\47\1\50\1\42\1\51"+
    "\1\52\1\53\1\42\31\21\1\54\121\21\1\55\4\21\1\56\1\21\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\53\21\1\65\41\42\1\21\1\66\1\67\1\21\1\70\1\71\1\72\1\73\1\74\1"+
    "\75\1\76\1\77\1\100\1\21\1\101\1\102\1\103\1\104\1\105\1\106\1\42\1\107\1"+
    "\42\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\42\1\121\1\42"+
    "\1\122\3\42\3\21\1\123\1\124\1\125\12\42\4\21\1\126\17\42\2\21\1\127\41\42"+
    "\2\21\1\130\1\131\3\42\1\132\27\21\1\133\2\21\1\134\45\42\1\135\13\42\1\136"+
    "\26\42\1\137\1\140\1\141\1\142\1\143\20\42\1\144\1\145\4\42\1\146\2\42\1\147"+
    "\16\42\246\21\1\150\20\21\1\151\1\152\25\21\1\153\51\42\2\21\1\154\u0e05\42");

  /* The ZZ_CMAP_Y table has 6976 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\4\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2"+
    "\15\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\0\1\31\6\0\1\32\1"+
    "\0\1\33\1\0\1\34\1\35\1\36\1\37\5\15\1\40\1\15\1\41\5\42\1\43\2\42\16\44\4"+
    "\45\1\46\13\44\1\47\1\50\1\51\1\52\1\53\1\54\1\47\1\52\1\55\1\47\1\44\1\52"+
    "\1\50\1\52\1\53\1\45\1\56\1\55\1\57\1\60\1\61\4\45\1\46\4\44\1\62\1\52\17"+
    "\44\1\42\1\54\1\51\1\45\1\41\2\44\21\42\1\63\6\42\4\57\1\64\1\65\2\57\1\64"+
    "\3\0\1\57\1\66\1\0\1\67\40\0\1\44\1\70\1\71\1\72\1\0\1\73\1\40\1\74\1\53\3"+
    "\15\1\75\2\15\10\42\1\76\1\54\1\55\6\44\1\42\1\77\1\51\1\53\14\15\14\42\10"+
    "\44\1\100\1\0\1\101\15\44\1\47\2\45\1\50\30\44\1\102\10\15\1\40\1\103\1\0"+
    "\1\104\11\42\22\0\6\57\1\105\1\0\1\105\13\0\12\57\1\105\5\0\2\106\1\107\1"+
    "\65\1\110\30\57\1\103\3\0\1\111\1\0\1\65\2\106\1\112\1\113\4\0\1\114\7\57"+
    "\7\0\1\110\25\57\1\64\2\0\1\103\3\0\2\106\1\112\7\57\1\105\2\0\1\64\1\33\1"+
    "\0\5\57\1\64\1\33\2\0\2\66\5\0\6\57\1\66\21\0\5\57\1\114\1\57\1\64\21\0\15"+
    "\57\1\64\1\103\4\0\1\66\1\0\2\57\1\64\1\115\2\106\1\110\3\57\1\66\1\110\1"+
    "\57\2\113\5\57\1\114\1\57\1\67\1\65\1\64\1\103\3\0\1\33\3\0\1\116\1\64\1\115"+
    "\2\106\1\64\1\117\1\120\2\0\1\110\1\105\1\121\1\113\5\57\1\114\1\57\1\114"+
    "\1\111\1\64\7\0\1\110\1\67\1\0\1\115\2\106\1\65\1\66\3\0\1\110\1\57\2\116"+
    "\5\57\1\114\1\57\1\114\1\110\1\64\1\103\4\0\1\66\3\0\1\64\1\115\2\106\2\0"+
    "\1\103\2\0\1\110\1\57\2\113\5\57\1\114\1\57\1\114\1\110\1\64\1\103\7\0\1\116"+
    "\1\64\1\115\2\106\1\122\1\117\2\0\1\121\1\110\1\105\1\65\1\114\1\64\1\111"+
    "\1\114\1\121\1\66\1\105\1\65\2\57\1\64\5\0\1\66\4\0\1\115\2\106\1\37\4\0\1"+
    "\110\1\57\2\114\5\57\1\114\3\57\1\64\1\103\6\0\1\105\1\0\1\64\1\115\2\106"+
    "\2\0\1\117\1\37\1\66\1\110\1\57\2\114\5\57\1\114\2\57\1\110\1\64\1\103\7\0"+
    "\1\33\1\64\1\115\2\106\1\111\4\0\1\110\1\57\2\114\11\57\1\105\1\103\3\0\1"+
    "\33\1\0\1\105\1\117\1\123\1\64\1\115\2\106\2\117\1\124\1\57\1\0\1\110\3\57"+
    "\1\105\1\65\5\57\1\116\2\57\1\103\1\57\1\105\7\0\1\115\2\106\4\0\1\110\13"+
    "\57\1\114\3\0\1\57\1\105\2\0\2\106\1\107\11\0\1\111\1\113\1\67\1\103\1\0\1"+
    "\57\1\110\1\57\1\110\1\125\1\65\1\110\1\114\2\0\1\103\1\57\1\67\2\0\2\106"+
    "\1\107\1\57\10\0\1\66\7\0\2\106\1\126\2\117\3\0\2\57\1\110\10\57\1\66\6\0"+
    "\1\57\1\66\34\0\12\57\1\105\4\0\1\121\2\106\1\107\1\0\1\57\1\64\1\65\1\64"+
    "\1\103\1\111\1\0\1\65\1\66\1\110\2\57\1\64\2\0\1\33\2\106\1\107\1\0\11\15"+
    "\1\75\1\0\1\127\12\57\1\105\123\57\1\114\1\64\1\57\1\105\1\114\1\64\12\57"+
    "\1\114\1\64\10\57\1\114\1\64\1\57\1\105\1\114\1\64\3\57\1\105\16\57\1\114"+
    "\1\64\20\57\1\105\3\0\1\130\4\117\1\131\4\57\4\0\25\15\1\132\1\42\1\133\1"+
    "\110\132\57\1\113\4\57\1\134\5\57\1\105\1\0\22\57\1\105\1\135\1\136\1\57\1"+
    "\66\1\0\3\57\1\114\1\64\3\0\4\57\1\64\3\0\4\57\1\64\3\0\3\57\1\114\1\66\3"+
    "\0\15\57\10\0\1\121\1\0\1\66\2\106\1\107\1\0\2\117\1\120\5\0\2\106\1\107\1"+
    "\0\26\57\2\0\1\57\1\113\10\57\1\67\1\0\21\57\1\64\2\0\7\57\1\105\11\0\1\115"+
    "\2\106\7\57\1\64\1\57\1\66\2\0\13\57\1\0\6\57\1\64\1\0\2\106\1\137\11\0\5"+
    "\57\1\105\2\0\15\57\1\66\12\0\2\106\1\107\1\0\2\106\1\107\2\0\1\121\27\0\1"+
    "\110\13\57\4\0\1\110\1\57\1\0\2\106\1\107\11\0\1\121\7\57\1\66\2\0\1\65\2"+
    "\106\1\112\12\57\1\64\6\0\11\57\7\0\2\106\1\107\1\110\2\106\1\112\10\57\1"+
    "\64\2\42\1\140\27\0\1\110\1\114\1\64\1\111\2\0\13\42\17\57\1\141\3\42\1\63"+
    "\7\42\1\142\11\57\20\0\45\44\1\55\1\42\1\46\30\44\2\42\2\15\1\42\1\133\1\15"+
    "\1\132\2\42\2\15\2\42\2\15\1\42\1\133\1\15\1\132\2\42\2\143\2\42\2\15\3\42"+
    "\1\133\2\42\2\57\2\42\2\57\2\42\2\57\1\42\1\144\1\15\1\145\1\146\1\144\1\15"+
    "\1\66\1\42\1\146\1\15\1\0\2\42\1\15\1\147\1\146\1\144\1\15\1\66\2\150\1\151"+
    "\7\0\1\152\1\153\13\0\1\153\4\0\1\154\1\155\1\156\1\157\2\155\1\156\1\160"+
    "\3\161\1\162\30\0\1\73\1\163\1\164\1\165\1\41\1\127\1\102\1\132\1\0\1\166"+
    "\1\74\1\167\1\15\1\170\1\171\1\54\1\0\1\172\1\133\1\173\14\117\1\174\1\175"+
    "\1\120\1\0\1\176\17\0\1\177\13\0\1\200\14\0\1\201\13\0\1\202\176\0\17\117"+
    "\23\0\1\135\5\117\1\0\1\203\133\0\1\135\7\117\33\0\13\15\1\40\13\42\1\43\1"+
    "\52\1\204\1\45\1\53\1\44\1\50\1\42\1\205\31\44\1\140\1\163\1\206\1\101\2\0"+
    "\1\207\11\42\1\210\1\0\1\211\16\57\1\0\1\121\4\0\5\57\1\105\2\0\1\57\1\105"+
    "\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1\105\1\57\1"+
    "\105\23\0\1\121\64\0\1\32\1\212\6\0\1\130\1\117\1\120\1\0\1\110\1\64\1\123"+
    "\1\66\1\110\24\57\1\105\1\0\2\110\25\57\1\105\1\57\1\0\1\110\11\57\1\64\1"+
    "\110\26\57\1\105\1\135\1\120\2\0\6\57\1\105\15\0\4\57\10\0\2\117\1\120\7\0"+
    "\2\117\1\130\3\117\10\0\2\117\1\120\11\0\1\130\3\117\20\0\55\57\1\64\22\0"+
    "\65\57\1\64\12\0\43\57\1\66\20\0\13\57\1\64\3\57\1\66\4\57\2\106\1\112\5\0"+
    "\13\44\1\213\3\0\1\121\7\44\1\64\21\57\1\214\2\117\11\0\1\121\2\57\1\101\3"+
    "\44\1\46\17\44\1\63\1\42\1\45\1\51\2\44\1\215\1\216\1\44\1\46\4\44\1\52\1"+
    "\40\1\15\1\44\17\0\1\121\1\217\1\57\2\116\1\105\5\57\1\105\3\0\1\117\1\120"+
    "\2\0\15\57\3\0\1\65\14\57\7\0\2\106\1\107\5\0\1\65\1\57\1\121\1\103\2\106"+
    "\1\112\6\57\1\64\2\0\5\57\1\105\6\0\7\57\1\66\1\0\13\57\1\105\6\0\1\121\2"+
    "\106\1\107\1\0\1\57\1\114\2\57\2\106\1\112\1\105\12\57\1\66\5\0\1\105\2\57"+
    "\1\0\2\106\1\107\1\0\5\57\1\105\1\33\1\65\14\57\1\103\1\111\1\110\1\64\1\67"+
    "\5\0\1\121\1\64\2\57\1\105\1\0\1\65\1\66\2\0\1\110\1\105\1\110\1\105\1\110"+
    "\1\105\2\0\1\57\1\105\1\57\1\105\12\42\1\43\1\57\1\42\1\133\2\0\24\42\10\57"+
    "\1\105\3\0\2\106\1\107\1\0\51\57\3\0\5\57\1\105\1\121\14\57\1\0\33\57\1\64"+
    "\32\57\1\64\11\0\1\42\1\43\2\0\1\220\1\42\1\0\1\125\2\57\1\114\2\57\1\105"+
    "\1\57\1\67\1\116\1\114\32\57\1\64\7\0\1\121\32\57\1\64\4\0\20\57\1\65\15\57"+
    "\12\0\3\57\35\0\1\57\1\114\41\57\1\66\4\0\2\106\1\107\1\0\1\102\5\15\1\40"+
    "\1\0\1\104\5\42\1\43\2\0\1\65\25\57\1\105\1\65\1\57\1\65\1\57\1\65\1\57\1"+
    "\65\1\66\10\0\3\57\1\110\5\57\1\105\4\57\1\105\1\116\3\57\1\64\3\57\1\64\10"+
    "\0\36\57\1\105\2\0\1\221\13\117\3\0\16\117\1\131\3\0\1\135\75\0\7\57\1\66"+
    "\14\57\1\66\3\0\1\130\6\117\1\0\10\57\1\117\3\0\4\57\1\222\1\57\1\223\1\0"+
    "\11\57\1\64\2\0\7\57\1\64\11\57\1\0\2\57\1\130\1\120\12\0\12\15\12\42\23\57"+
    "\1\64\2\106\1\107\1\0\11\15\1\0\11\42\1\0\12\57\2\0\15\57\47\0\15\57\1\105"+
    "\2\0\5\57\1\64\2\0\2\57\46\0\1\57\1\64\1\114\12\57\1\116\1\66\1\113\5\57\1"+
    "\64\2\117\5\57\1\105\1\130\1\117\7\57\1\105\1\0\1\221\2\117\14\0\4\57\1\105"+
    "\1\64\1\221\1\117\5\57\1\214\1\117\1\0\6\57\1\64\21\0\16\57\1\0\1\224\4\117"+
    "\1\135\13\117\1\66\3\0\1\57\2\110\6\57\3\0\2\117\6\0\7\57\1\225\7\57\1\226"+
    "\10\0\2\57\1\110\6\57\1\66\1\221\1\117\4\0\15\57\1\64\2\0\5\57\1\64\2\117"+
    "\4\57\1\105\1\0\2\117\4\57\1\64\5\0\1\130\1\117\24\0\22\57\1\66\15\0\14\15"+
    "\1\40\3\0\14\42\1\43\1\0\1\135\1\117\30\0\7\117\1\37\40\0\1\121\15\57\6\0"+
    "\1\135\4\117\1\227\2\106\4\0\1\121\13\57\10\0\6\57\1\66\1\0\2\106\1\107\1"+
    "\0\1\121\10\57\1\105\3\0\1\115\2\106\4\0\10\57\1\105\1\33\2\0\1\121\13\57"+
    "\1\105\3\0\1\110\1\66\2\0\2\106\1\230\1\66\1\130\4\117\1\131\2\0\4\57\1\116"+
    "\6\57\25\0\1\57\1\105\1\114\1\116\3\57\1\116\2\57\1\66\1\0\13\57\1\105\4\0"+
    "\2\106\1\107\2\0\1\110\1\57\2\113\5\57\1\114\1\57\1\114\1\110\1\64\1\103\4"+
    "\0\1\66\2\0\1\110\1\64\47\0\15\57\1\66\3\0\1\121\1\105\1\0\2\106\1\107\11"+
    "\0\14\57\5\0\1\116\2\0\2\106\1\107\51\0\13\57\1\105\12\0\1\57\11\0\14\57\5"+
    "\0\1\66\2\0\2\106\1\107\11\0\12\57\1\105\5\0\2\106\1\107\15\0\6\57\1\64\5"+
    "\0\2\106\1\126\131\0\10\15\10\42\2\106\1\126\1\117\1\37\2\0\1\121\60\0\16"+
    "\57\1\66\1\0\2\57\1\114\10\57\1\105\4\0\1\66\3\0\2\106\1\126\4\117\1\131\1"+
    "\65\7\57\34\0\46\57\1\64\31\0\33\117\1\37\4\0\61\57\57\0\13\57\1\105\64\0"+
    "\21\57\1\105\56\0\16\57\1\66\1\0\7\57\1\105\2\106\1\107\31\0\7\57\1\64\4\0"+
    "\14\57\4\0\1\57\3\0\2\106\1\231\1\117\1\232\5\57\1\0\1\110\4\57\34\0\21\57"+
    "\1\66\2\0\1\66\17\0\1\121\3\57\20\0\1\66\7\0\73\57\1\66\4\0\74\57\1\105\3"+
    "\0\1\64\77\0\32\57\1\105\1\0\3\57\1\66\2\57\1\66\1\0\2\57\1\64\61\0\4\117"+
    "\1\120\43\0\6\15\1\165\6\42\6\15\1\165\1\42\1\144\4\42\6\15\1\165\6\42\1\74"+
    "\1\73\1\233\1\102\1\74\1\15\1\165\1\210\1\104\1\42\1\104\2\42\6\15\1\165\6"+
    "\42\1\75\1\40\1\102\1\15\1\74\1\15\1\234\6\42\1\75\1\40\1\15\1\166\1\235\1"+
    "\15\1\234\6\42\6\15\1\165\6\42\6\15\1\165\6\42\6\15\1\165\6\42\6\15\1\165"+
    "\6\42\6\15\1\165\6\42\6\15\1\165\6\42\1\133\6\15\1\234\5\42\1\43\1\42\1\54"+
    "\5\15\1\40\6\42\1\144\1\42\6\15\1\234\5\42\1\43\1\42\1\54\5\15\1\40\6\42\1"+
    "\144\1\42\6\15\1\234\5\42\1\43\1\42\1\46\1\115\14\106\61\57\1\236\2\117\14"+
    "\0\10\15\1\165\10\42\3\0\2\106\1\107\51\0\1\57\1\110\6\57\1\111\1\113\1\110"+
    "\1\57\1\105\1\57\1\125\1\0\1\33\1\121\1\125\1\110\1\111\1\113\2\125\1\111"+
    "\1\113\1\105\1\57\1\105\1\57\1\110\1\67\2\57\1\116\4\57\1\0\2\110\1\116\4"+
    "\57\21\0\3\117\1\131\74\0\65\57\1\105\12\0\15\57\1\66\2\0\67\57\1\64\140\57"+
    "\1\64\27\0\7\57\1\64\70\0");

  /* The ZZ_CMAP_A table has 636 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\1\2\2\3\1\1\2\0\1\3\1\50\1\23\1\47\3\0\1\22\1\65\1\66\1\57\1\6\1"+
    "\52\1\37\1\54\1\55\1\7\7\12\2\5\1\35\1\53\1\42\1\44\1\40\1\51\1\60\6\27\5"+
    "\26\1\31\1\26\1\32\1\26\1\30\2\26\1\67\1\24\1\70\1\0\1\56\1\73\1\100\1\10"+
    "\1\76\1\74\1\20\1\21\1\104\1\113\1\103\2\34\1\13\1\105\1\14\1\77\1\101\1\106"+
    "\1\102\1\111\1\75\1\107\1\114\1\112\1\11\1\110\1\34\1\71\1\46\1\72\1\61\2"+
    "\0\1\3\2\0\1\3\5\0\1\33\3\0\2\15\1\25\1\34\3\0\1\15\1\33\1\0\3\25\1\0\3\26"+
    "\1\0\3\26\10\34\1\0\1\26\1\34\1\26\2\34\1\26\1\34\1\26\2\34\1\26\1\34\2\26"+
    "\1\34\1\26\1\34\1\26\3\34\2\26\1\34\1\26\1\34\2\26\1\34\3\26\2\34\3\26\3\34"+
    "\1\26\2\34\5\33\1\26\1\33\1\34\1\26\1\33\1\34\1\26\1\33\1\34\1\26\1\33\1\34"+
    "\1\33\3\34\2\33\4\0\3\33\3\0\1\33\1\0\1\33\1\0\1\33\1\0\1\26\1\34\2\0\1\33"+
    "\3\34\1\0\1\26\2\0\1\26\1\0\1\26\1\0\4\26\1\0\1\26\3\34\2\26\1\34\1\0\2\26"+
    "\1\34\4\0\1\26\1\34\1\0\3\26\1\0\1\33\3\0\3\34\3\33\1\0\6\4\3\0\3\33\1\0\2"+
    "\33\1\0\2\4\3\33\2\0\2\33\1\0\2\33\2\0\2\4\2\33\1\0\1\33\6\25\5\0\1\33\1\0"+
    "\1\33\5\25\1\33\1\25\1\0\2\33\1\0\1\33\1\0\1\33\2\4\2\25\1\0\1\26\3\0\4\25"+
    "\3\0\2\26\2\0\2\34\2\0\1\3\3\33\2\0\3\25\3\33\2\4\1\25\1\0\1\34\3\0\3\33\4"+
    "\34\1\33\1\0\1\26\1\0\1\26\1\34\1\0\2\34\1\33\1\0\1\34\3\0\2\34\1\26\3\0\7"+
    "\3\1\0\2\3\5\0\1\3\1\15\1\16\2\0\6\15\5\17\1\16\4\17\5\16\6\0\1\26\2\0\1\34"+
    "\3\26\2\34\1\26\1\0\1\26\1\0\2\26\1\0\2\34\4\33\1\34\3\0\1\26\2\34\2\0\1\34"+
    "\1\0\3\25\1\26\1\34\3\25\1\43\1\0\1\41\3\0\1\45\1\0\1\62\6\0\1\36\1\63\1\64"+
    "\3\0\1\57\2\0\1\26\2\34\1\26\2\33\2\26\1\34\1\26\1\34\2\0\1\25\2\0\2\34\1"+
    "\0\1\34\1\0\1\34\3\0\2\33\1\25\1\26\1\34\1\33\1\0\2\33\2\25\1\33\2\0\1\26"+
    "\1\34\1\26\1\34\3\33\1\34\1\33\3\0\1\34\3\0\1\25\1\33\1\25\4\33\1\25\1\0\2"+
    "\25\3\33\2\25\1\0\1\33\5\25\4\4\1\33\1\0\2\4\1\0\3\25\1\0\1\33\1\0\2\26\1"+
    "\0\1\26\1\0\2\34\2\0\2\26\1\33\2\0\1\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\1\1\5"+
    "\4\6\2\7\1\6\2\4\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\15\1\1\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\1\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\14\6\1\45\1\46"+
    "\5\47\1\0\1\50\1\51\1\0\1\5\3\0\3\5"+
    "\1\0\6\6\1\0\1\52\2\0\1\53\1\0\1\11"+
    "\1\54\1\17\1\55\1\56\1\57\1\60\1\61\1\0"+
    "\1\62\3\6\1\63\3\6\1\64\6\6\1\65\4\6"+
    "\1\45\2\0\1\66\1\67\1\70\1\71\1\72\6\0"+
    "\1\5\1\73\4\6\1\74\2\0\1\75\12\6\1\76"+
    "\1\6\1\77\3\6\1\100\5\6\1\0\1\101\6\0"+
    "\1\6\1\102\1\103\1\104\1\0\3\6\1\105\1\106"+
    "\3\6\1\107\13\6\2\0\1\5\3\0\1\110\5\6"+
    "\1\111\1\112\5\6\1\113\2\6\1\114\1\6\1\115"+
    "\1\6\1\0\2\5\2\6\1\116\1\117\10\6\1\120"+
    "\1\6\1\121\1\122\1\123\1\6\1\124\1\125\2\6"+
    "\1\126\2\6\1\127\5\6\1\130\3\6\1\131\2\6"+
    "\1\132\1\133\1\6\1\134\1\6\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u0181\0\u056a\0\u05b7\0\u0604\0\u0181\0\u051d"+
    "\0\u0651\0\u069e\0\u0181\0\u06eb\0\u0181\0\u0738\0\u0181\0\u0785"+
    "\0\u0181\0\u0181\0\u07d2\0\u0181\0\u0181\0\u051d\0\u0181\0\u081f"+
    "\0\u086c\0\u051d\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181\0\u0181"+
    "\0\u08b9\0\u051d\0\u051d\0\u051d\0\u0906\0\u051d\0\u0953\0\u09a0"+
    "\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08"+
    "\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\u051d\0\u0dd6\0\u0e23"+
    "\0\u0e70\0\u0ebd\0\u0f0a\0\u051d\0\u051d\0\u02b5\0\u051d\0\u0f57"+
    "\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf"+
    "\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u05b7\0\u051d\0\u1340\0\u0604"+
    "\0\u051d\0\u138d\0\u13da\0\u1427\0\u051d\0\u0181\0\u1474\0\u051d"+
    "\0\u0181\0\u051d\0\u14c1\0\u051d\0\u150e\0\u155b\0\u15a8\0\u15f5"+
    "\0\u1642\0\u168f\0\u16dc\0\u0436\0\u1729\0\u1776\0\u17c3\0\u1810"+
    "\0\u185d\0\u18aa\0\u0436\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b"+
    "\0\u1a78\0\u1a2b\0\u051d\0\u051d\0\u051d\0\u051d\0\u051d\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u0436\0\u1ce0"+
    "\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1e14\0\u051d\0\u1eae"+
    "\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116"+
    "\0\u2163\0\u0436\0\u21b0\0\u0436\0\u21fd\0\u224a\0\u2297\0\u22e4"+
    "\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u051d\0\u24ff"+
    "\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u0436\0\u271a"+
    "\0\u0436\0\u2767\0\u27b4\0\u2801\0\u284e\0\u0436\0\u0436\0\u289b"+
    "\0\u28e8\0\u2935\0\u0436\0\u2982\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e"+
    "\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u0436\0\u2e9f\0\u2eec\0\u2f39"+
    "\0\u2f86\0\u2fd3\0\u0436\0\u0436\0\u3020\0\u306d\0\u30ba\0\u3107"+
    "\0\u3154\0\u0436\0\u31a1\0\u31ee\0\u0436\0\u323b\0\u0436\0\u3288"+
    "\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409\0\u0436\0\u0436\0\u3456"+
    "\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u0436"+
    "\0\u36be\0\u32d5\0\u0436\0\u0436\0\u370b\0\u0436\0\u3758\0\u37a5"+
    "\0\u37f2\0\u0436\0\u383f\0\u388c\0\u0436\0\u38d9\0\u3926\0\u3973"+
    "\0\u39c0\0\u3a0d\0\u0436\0\u3a5a\0\u3aa7\0\u3af4\0\u0436\0\u3b41"+
    "\0\u3b8e\0\u0436\0\u0436\0\u3bdb\0\u0436\0\u3c28\0\u0436";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\13\1\20\1\21\2\22\1\23\1\17"+
    "\1\24\1\25\1\26\1\27\1\30\5\31\1\30\1\17"+
    "\1\32\1\33\1\34\1\6\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\2\17"+
    "\1\100\2\17\1\101\1\102\1\103\1\17\54\30\1\104"+
    "\114\30\1\105\40\30\55\106\1\107\1\106\1\110\74\106"+
    "\1\111\31\106\1\112\23\106\1\6\5\0\1\6\10\0"+
    "\1\6\4\0\1\6\10\0\7\6\1\113\5\6\1\0"+
    "\3\6\1\0\6\6\32\0\1\10\51\0\1\114\114\0"+
    "\1\114\114\0\1\115\44\0\2\116\1\0\1\116\2\0"+
    "\1\116\1\0\1\117\15\0\1\117\21\0\1\120\1\0"+
    "\1\121\42\0\2\13\1\0\1\13\2\0\1\13\2\117"+
    "\14\0\2\117\21\0\1\120\1\0\1\122\36\0\1\6"+
    "\4\0\1\123\1\6\1\124\2\0\1\123\4\0\1\6"+
    "\4\0\1\6\10\0\7\6\1\113\5\6\1\0\3\6"+
    "\1\0\6\6\34\0\2\116\1\0\1\125\1\0\1\126"+
    "\1\125\2\117\13\0\1\126\2\117\21\0\1\120\1\0"+
    "\1\121\42\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\13\17"+
    "\1\130\5\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\7\17"+
    "\1\131\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\4\17\1\132\14\17\121\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\6\17\1\133\1\134\11\17\2\135\1\0\17\135"+
    "\1\136\1\135\1\137\70\135\23\140\1\141\1\142\70\140"+
    "\4\0\2\31\1\0\6\31\1\0\1\31\1\0\2\31"+
    "\1\143\3\0\7\31\21\0\1\31\15\0\21\31\1\6"+
    "\5\0\1\6\10\0\1\6\4\0\1\6\10\0\1\33"+
    "\6\6\1\113\5\6\1\0\3\6\1\0\6\6\30\0"+
    "\1\6\4\0\1\123\1\6\1\124\2\0\1\123\4\0"+
    "\1\6\4\0\1\6\10\0\2\6\1\144\1\35\3\6"+
    "\1\113\5\6\1\0\3\6\1\0\6\6\30\0\1\6"+
    "\5\0\1\6\10\0\1\6\4\0\1\6\10\0\2\6"+
    "\1\37\4\6\1\113\5\6\1\0\3\6\1\0\6\6"+
    "\70\0\1\145\3\0\1\146\50\0\2\43\1\0\112\43"+
    "\54\0\1\147\11\0\1\150\26\0\1\6\5\0\1\6"+
    "\10\0\1\6\4\0\1\6\10\0\7\6\1\113\5\6"+
    "\1\0\3\6\1\0\1\151\5\6\104\0\1\152\77\0"+
    "\1\153\131\0\1\154\44\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\155\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\13\17\1\156\5\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\157\1\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\3\17\1\160\2\17\1\161"+
    "\5\17\1\162\4\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\3\17\1\163\15\17\4\0\2\17\1\0\5\17"+
    "\1\164\1\0\1\17\1\0\1\17\1\165\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\6\17\1\166\12\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\1\167\1\170\17\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\6\17\1\171"+
    "\12\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\1\172\1\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\1\173"+
    "\20\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\13\17"+
    "\1\174\5\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\175\1\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\17\17\1\176\1\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\7\17\1\177\11\17\1\200\5\0\1\200\10\0"+
    "\1\200\4\0\1\200\10\0\7\200\1\201\1\200\1\202"+
    "\3\200\1\0\1\200\1\203\1\200\1\0\6\200\30\0"+
    "\1\200\3\204\2\0\1\200\10\0\1\200\4\0\1\200"+
    "\10\0\7\200\1\201\1\200\1\202\3\200\1\0\1\200"+
    "\1\203\1\200\1\0\6\200\1\0\1\204\105\0\1\205"+
    "\112\0\1\206\131\0\1\207\61\0\1\210\121\0\1\6"+
    "\54\0\2\211\1\0\1\211\2\0\1\211\106\0\2\212"+
    "\1\0\1\212\2\0\1\212\106\0\2\213\1\0\1\213"+
    "\2\0\1\213\106\0\2\123\1\0\1\123\2\0\1\123"+
    "\1\117\15\0\1\117\24\0\1\214\51\0\1\117\15\0"+
    "\1\117\67\0\2\116\1\0\1\116\2\0\1\116\2\117"+
    "\14\0\2\117\21\0\1\120\1\0\1\215\43\0\1\216"+
    "\1\0\2\216\1\0\1\216\5\0\2\216\5\0\1\216"+
    "\44\0\1\216\1\0\1\216\1\0\1\216\36\0\1\127"+
    "\76\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\15\17\1\217"+
    "\3\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\11\17"+
    "\1\220\7\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\11\17\1\221\7\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\3\17\1\222\15\17\4\0\2\17\1\0\4\17"+
    "\1\223\1\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\1\135\3\0\111\135"+
    "\1\140\3\0\111\140\22\0\1\143\72\0\2\144\1\0"+
    "\112\144\1\224\5\0\1\224\10\0\1\224\4\0\1\224"+
    "\10\0\7\224\1\225\1\224\1\226\3\224\1\0\1\224"+
    "\1\0\1\224\1\0\6\224\67\0\1\227\61\0\2\17"+
    "\1\0\4\17\1\230\1\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\11\17\1\231"+
    "\3\17\1\232\3\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\11\17\1\233\7\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\11\17\1\234\7\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\6\17\1\235\2\17\1\236\7\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\7\17\1\237"+
    "\11\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\5\17"+
    "\1\240\13\17\4\0\2\17\1\0\5\17\1\241\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\17\1\242\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\7\17\1\243\11\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\1\244\20\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\1\17\1\245\17\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\3\17\1\246\3\17\1\247\11\17\4\0"+
    "\2\17\1\0\4\17\1\250\1\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\20\17"+
    "\1\251\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\1\252\1\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\4\17\1\253\1\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\254\1\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\15\17\1\255\3\17\1\200\5\0\1\200\10\0\1\200"+
    "\4\0\1\200\10\0\7\200\1\256\5\200\1\0\3\200"+
    "\1\0\6\200\74\0\1\202\107\0\1\257\61\0\2\211"+
    "\1\0\1\211\2\0\1\211\41\0\1\260\44\0\2\261"+
    "\1\0\1\261\2\0\1\261\106\0\2\262\1\0\1\262"+
    "\2\0\1\262\106\0\2\263\1\0\1\263\2\0\1\263"+
    "\106\0\2\212\1\0\1\264\2\0\1\264\115\0\1\117"+
    "\15\0\1\117\24\0\1\265\42\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\7\17\1\266\11\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\267\1\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\11\17\1\270\7\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\1\271\1\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\21\17\1\224\5\0"+
    "\1\224\10\0\1\224\4\0\1\224\10\0\7\224\1\272"+
    "\5\224\1\0\3\224\1\0\6\224\74\0\1\226\54\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\1\273\1\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\3\17\1\274\15\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\2\17\1\275"+
    "\16\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\5\17"+
    "\1\276\13\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\5\17\1\277\13\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\300\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\7\17\1\301\11\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\10\17\1\302\10\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\1\303\1\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\5\17\1\304\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\10\17\1\305\10\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\6\17\1\306\12\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\11\17\1\307\7\17"+
    "\4\0\2\17\1\0\5\17\1\310\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\4\17\1\311"+
    "\14\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\7\17"+
    "\1\312\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\6\17\1\313\12\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\314\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\6\17\1\315\12\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\1\17\1\316\17\17\44\0\1\200\54\0"+
    "\2\317\1\0\1\317\2\0\1\317\106\0\2\320\1\0"+
    "\1\320\2\0\1\320\106\0\2\321\1\0\1\321\2\0"+
    "\1\321\106\0\2\322\1\0\1\322\2\0\1\322\106\0"+
    "\2\261\1\0\1\323\2\0\1\323\107\0\1\324\1\0"+
    "\2\324\1\0\1\324\5\0\2\324\5\0\1\324\44\0"+
    "\1\324\1\0\1\324\1\0\1\324\20\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\1\17\1\325\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\6\17\1\326\2\17\1\327"+
    "\7\17\44\0\1\224\54\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\1\17\1\330\17\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\1\17\1\331\17\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\6\17\1\332\12\17\4\0\2\17"+
    "\1\0\4\17\1\333\1\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\21\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\1\334\20\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\10\17\1\335\10\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\336"+
    "\1\17\1\127\3\0\7\17\21\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\7\17\1\337"+
    "\11\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\7\17"+
    "\1\340\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\3\17\1\341\15\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\1\17\1\342\17\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\1\17\1\343\17\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\15\17\1\344\3\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\14\17\1\345\4\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\2\17\1\346\16\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\1\347"+
    "\1\17\1\127\3\0\7\17\21\0\1\17\15\0\21\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\3\17\1\350"+
    "\15\17\4\0\2\317\1\0\1\317\2\0\1\317\41\0"+
    "\1\351\54\0\1\117\15\0\1\117\23\0\1\121\51\0"+
    "\2\117\14\0\2\117\23\0\1\122\42\0\2\352\1\0"+
    "\1\352\2\0\1\352\106\0\2\320\1\0\1\353\2\0"+
    "\1\353\107\0\1\126\1\0\2\126\1\0\1\126\5\0"+
    "\2\126\5\0\1\126\44\0\1\126\1\0\1\126\1\0"+
    "\1\126\20\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\1\354\1\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\7\17"+
    "\1\355\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\356\1\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\357\1\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\7\17\1\360\11\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\361\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\2\17\1\362\16\17\4\0\2\17\1\0\5\17"+
    "\1\363\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\21\17\4\0\2\17\1\0\1\17"+
    "\1\364\4\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\1\17\1\365\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\7\17\1\366\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\7\17\1\367\11\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\1\17\1\370"+
    "\17\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\6\17"+
    "\1\371\12\17\4\0\2\372\1\0\1\372\2\0\1\372"+
    "\115\0\1\117\15\0\1\117\24\0\1\214\51\0\2\117"+
    "\14\0\2\117\23\0\1\215\42\0\2\17\1\0\4\17"+
    "\1\373\1\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\1\374\20\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\5\17\1\375\13\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\6\17\1\376\12\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\1\17\1\377\17\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\4\17\1\u0100"+
    "\14\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\13\17"+
    "\1\u0101\5\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\1\u0102\1\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\21\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\3\17\1\u0103\15\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\3\17\1\u0104\15\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\14\17\1\u0105\4\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\1\17\1\u0106\17\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\7\17\1\u0107\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\1\17\1\u0108\17\17"+
    "\4\0\2\17\1\0\6\17\1\0\1\17\1\0\2\17"+
    "\1\127\3\0\7\17\21\0\1\17\15\0\1\17\1\u0109"+
    "\17\17\4\0\2\17\1\0\5\17\1\u010a\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\5\17\1\u010b\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\21\17\4\0\2\17\1\0\6\17\1\0\1\17\1\0"+
    "\2\17\1\127\3\0\7\17\21\0\1\17\15\0\7\17"+
    "\1\u010c\11\17\4\0\2\17\1\0\6\17\1\0\1\17"+
    "\1\0\2\17\1\127\3\0\7\17\21\0\1\17\15\0"+
    "\3\17\1\u010d\15\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\u010e\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\1\u010f\1\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\21\17\4\0\2\17\1\0\6\17\1\0"+
    "\1\17\1\0\2\17\1\127\3\0\7\17\21\0\1\17"+
    "\15\0\15\17\1\u0110\3\17\4\0\2\17\1\0\6\17"+
    "\1\0\1\17\1\0\2\17\1\127\3\0\7\17\21\0"+
    "\1\17\15\0\3\17\1\u0111\15\17\4\0\2\17\1\0"+
    "\5\17\1\u0112\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\21\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\1\u0113\20\17\4\0\2\17\1\0"+
    "\6\17\1\0\1\17\1\0\2\17\1\127\3\0\7\17"+
    "\21\0\1\17\15\0\17\17\1\u0114\1\17\4\0\2\17"+
    "\1\0\5\17\1\u0115\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\21\17\4\0\2\17"+
    "\1\0\6\17\1\0\1\17\1\0\2\17\1\127\3\0"+
    "\7\17\21\0\1\17\15\0\7\17\1\u0116\11\17\4\0"+
    "\2\17\1\0\6\17\1\0\1\17\1\0\2\17\1\127"+
    "\3\0\7\17\21\0\1\17\15\0\5\17\1\u0117\13\17";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15477];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\14\1\1\11\5\1\1\11\15\1\1\11\3\1"+
    "\1\11\7\1\3\11\1\1\1\11\17\1\1\11\4\1"+
    "\1\0\2\11\1\0\1\11\3\0\3\1\1\0\6\1"+
    "\1\0\1\11\2\0\1\11\1\0\2\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\0\1\11\24\1\2\0\5\11"+
    "\6\0\7\1\2\0\1\11\26\1\1\0\1\11\6\0"+
    "\4\1\1\0\24\1\2\0\1\1\3\0\24\1\1\0"+
    "\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[279];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int blockCommentDepth;
    private int blockDocDepth;
    private int blockCommentStartPos;
    private int blockDocStartPos;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              yybegin(YYINITIAL);
            zzStartRead = blockCommentStartPos;
            return TokenType.BAD_CHARACTER;
            }  // fall though
            case 280: break;
            case BLOCK_DOC: {
              yybegin(YYINITIAL);
            zzStartRead = blockDocStartPos;
            return TokenType.BAD_CHARACTER;
            }  // fall though
            case 281: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 94: break;
          case 2: 
            { return MQLTypes.NEW_LINE;
            } 
            // fall through
          case 95: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 96: break;
          case 4: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 97: break;
          case 5: 
            { return MQLTypes.INTEGER;
            } 
            // fall through
          case 98: break;
          case 6: 
            { return MQLTypes.VARID;
            } 
            // fall through
          case 99: break;
          case 7: 
            { return MQLTypes.SUPER_OR_SUBSCRIPT;
            } 
            // fall through
          case 100: break;
          case 8: 
            { return MQLTypes.BACK_SLASH;
            } 
            // fall through
          case 101: break;
          case 9: 
            { return MQLTypes.CONID;
            } 
            // fall through
          case 102: break;
          case 10: 
            { return MQLTypes.COLON;
            } 
            // fall through
          case 103: break;
          case 11: 
            { return MQLTypes.DOUBLE_COLON;
            } 
            // fall through
          case 104: break;
          case 12: 
            { return MQLTypes.DASH;
            } 
            // fall through
          case 105: break;
          case 13: 
            { return MQLTypes.RIGHT_ARROW;
            } 
            // fall through
          case 106: break;
          case 14: 
            { return MQLTypes.LEFT_ARROW;
            } 
            // fall through
          case 107: break;
          case 15: 
            { return MQLTypes.DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 108: break;
          case 16: 
            { return MQLTypes.VERTICAL_BAR;
            } 
            // fall through
          case 109: break;
          case 17: 
            { return MQLTypes.LINE_DOC;
            } 
            // fall through
          case 110: break;
          case 18: 
            { return MQLTypes.EXLAMATION_MARK;
            } 
            // fall through
          case 111: break;
          case 19: 
            { return MQLTypes.QUESTION_MARK;
            } 
            // fall through
          case 112: break;
          case 20: 
            { return MQLTypes.COMMA;
            } 
            // fall through
          case 113: break;
          case 21: 
            { return MQLTypes.SEMICOLON;
            } 
            // fall through
          case 114: break;
          case 22: 
            { return MQLTypes.DOT;
            } 
            // fall through
          case 115: break;
          case 23: 
            { return MQLTypes.UNDERSCORE;
            } 
            // fall through
          case 116: break;
          case 24: 
            { return MQLTypes.STAR;
            } 
            // fall through
          case 117: break;
          case 25: 
            { return MQLTypes.AT;
            } 
            // fall through
          case 118: break;
          case 26: 
            { return MQLTypes.TILDA;
            } 
            // fall through
          case 119: break;
          case 27: 
            { return MQLTypes.FORALL;
            } 
            // fall through
          case 120: break;
          case 28: 
            { return MQLTypes.LEQ;
            } 
            // fall through
          case 121: break;
          case 29: 
            { return MQLTypes.GEQ;
            } 
            // fall through
          case 122: break;
          case 30: 
            { return MQLTypes.LEFT_PAREN;
            } 
            // fall through
          case 123: break;
          case 31: 
            { return MQLTypes.RIGHT_PAREN;
            } 
            // fall through
          case 124: break;
          case 32: 
            { return MQLTypes.LEFT_BRACKET;
            } 
            // fall through
          case 125: break;
          case 33: 
            { return MQLTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 126: break;
          case 34: 
            { return MQLTypes.LEFT_BRACE;
            } 
            // fall through
          case 127: break;
          case 35: 
            { return MQLTypes.RIGHT_BRACE;
            } 
            // fall through
          case 128: break;
          case 36: 
            { return MQLTypes.BACK_QUOTE;
            } 
            // fall through
          case 129: break;
          case 37: 
            { yybegin(YYINITIAL); return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 130: break;
          case 38: 
            { yybegin(YYINITIAL); return MQLTypes.DOT;
            } 
            // fall through
          case 131: break;
          case 39: 
            { 
            } 
            // fall through
          case 132: break;
          case 40: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(MAYBE_FIRST_DOT_OPERATOR); return MQLTypes.NEW_LINE;
            } 
            // fall through
          case 133: break;
          case 41: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MAYBE_FIRST_DOT_OPERATOR); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 134: break;
          case 42: 
            { return MQLTypes.CHAR;
            } 
            // fall through
          case 135: break;
          case 43: 
            { return MQLTypes.STRING;
            } 
            // fall through
          case 136: break;
          case 44: 
            { return MQLTypes.LINE_COMMENT;
            } 
            // fall through
          case 137: break;
          case 45: 
            { return MQLTypes.EQUAL;
            } 
            // fall through
          case 138: break;
          case 46: 
            { return MQLTypes.DOUBLE_DOT;
            } 
            // fall through
          case 139: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 140: break;
          case 48: 
            { blockCommentDepth = 0; blockCommentStartPos = getTokenStart(); yybegin(BLOCK_COMMENT);
            } 
            // fall through
          case 141: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.LEFT_PAREN;
            } 
            // fall through
          case 142: break;
          case 50: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.BACK_QUOTE;
            } 
            // fall through
          case 143: break;
          case 51: 
            { return MQLTypes.TO;
            } 
            // fall through
          case 144: break;
          case 52: 
            { return MQLTypes.ON;
            } 
            // fall through
          case 145: break;
          case 53: 
            { return MQLTypes.ID;
            } 
            // fall through
          case 146: break;
          case 54: 
            { yybegin(YYINITIAL); return MQLTypes.DOUBLE_DOT;
            } 
            // fall through
          case 147: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(YYINITIAL); return MQLTypes.SYMOP_NO_RESERVED;
            } 
            // fall through
          case 148: break;
          case 56: 
            { blockCommentDepth++;
            } 
            // fall through
          case 149: break;
          case 57: 
            { blockCommentDepth--;
            if (blockCommentDepth == -1) {
                yybegin(YYINITIAL);
                zzStartRead = blockCommentStartPos;
                return MQLTypes.BLOCK_COMMENT;
            }
            } 
            // fall through
          case 150: break;
          case 58: 
            { blockDocDepth--;
            if (blockDocDepth == -1) {
                yybegin(YYINITIAL);
                zzStartRead = blockDocStartPos;
                return MQLTypes.BLOCK_DOC;
            }
            } 
            // fall through
          case 151: break;
          case 59: 
            { return MQLTypes.BUS;
            } 
            // fall through
          case 152: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(FIRST_DOT_OPERATOR); return MQLTypes.DOT;
            } 
            // fall through
          case 153: break;
          case 61: 
            { blockDocDepth = 0; blockDocStartPos = getTokenStart(); yybegin(BLOCK_DOC);
            } 
            // fall through
          case 154: break;
          case 62: 
            { return MQLTypes.OFF;
            } 
            // fall through
          case 155: break;
          case 63: 
            { return MQLTypes.ADD;
            } 
            // fall through
          case 156: break;
          case 64: 
            { return MQLTypes.REL;
            } 
            // fall through
          case 157: break;
          case 65: 
            { blockDocDepth++;
            } 
            // fall through
          case 158: break;
          case 66: 
            { return MQLTypes.NAME;
            } 
            // fall through
          case 159: break;
          case 67: 
            { return MQLTypes.FROM;
            } 
            // fall through
          case 160: break;
          case 68: 
            { return MQLTypes.FILE;
            } 
            // fall through
          case 161: break;
          case 69: 
            { return MQLTypes.DUMP;
            } 
            // fall through
          case 162: break;
          case 70: 
            { return MQLTypes.TEMP;
            } 
            // fall through
          case 163: break;
          case 71: 
            { return MQLTypes.TYPE;
            } 
            // fall through
          case 164: break;
          case 72: 
            { return MQLTypes.LIMIT;
            } 
            // fall through
          case 165: break;
          case 73: 
            { return MQLTypes.TOREL;
            } 
            // fall through
          case 166: break;
          case 74: 
            { return MQLTypes.TOMID;
            } 
            // fall through
          case 167: break;
          case 75: 
            { return MQLTypes.PRINT;
            } 
            // fall through
          case 168: break;
          case 76: 
            { return MQLTypes.QUERY;
            } 
            // fall through
          case 169: break;
          case 77: 
            { return MQLTypes.WHERE;
            } 
            // fall through
          case 170: break;
          case 78: 
            { return MQLTypes.DELETE;
            } 
            // fall through
          case 171: break;
          case 79: 
            { return MQLTypes.DEMOTE;
            } 
            // fall through
          case 172: break;
          case 80: 
            { return MQLTypes.SELECT;
            } 
            // fall through
          case 173: break;
          case 81: 
            { return MQLTypes.BUSID;
            } 
            // fall through
          case 174: break;
          case 82: 
            { return MQLTypes.FROMREL;
            } 
            // fall through
          case 175: break;
          case 83: 
            { return MQLTypes.FROMMID;
            } 
            // fall through
          case 176: break;
          case 84: 
            { return MQLTypes.TRIGGER;
            } 
            // fall through
          case 177: break;
          case 85: 
            { return MQLTypes.CONNECT;
            } 
            // fall through
          case 178: break;
          case 86: 
            { return MQLTypes.PROMOTE;
            } 
            // fall through
          case 179: break;
          case 87: 
            { return MQLTypes.HISTORY;
            } 
            // fall through
          case 180: break;
          case 88: 
            { return MQLTypes.REVISION;
            } 
            // fall through
          case 181: break;
          case 89: 
            { return MQLTypes.ATTRIBUTE;
            } 
            // fall through
          case 182: break;
          case 90: 
            { return MQLTypes.CONNECTION;
            } 
            // fall through
          case 183: break;
          case 91: 
            { return MQLTypes.ORIGINATED;
            } 
            // fall through
          case 184: break;
          case 92: 
            { return MQLTypes.DESCRIPTION;
            } 
            // fall through
          case 185: break;
          case 93: 
            { return MQLTypes.RELATIONSHIP;
            } 
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
